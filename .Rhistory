# st_write(vpsAllMonth,"data/output/vpsAllMonth.csv")
# st_write(patternAllMonth,"data/output/patternAllMonth.csv")
# hpsAllMonth <- st_read("data/output/hpsAllMonth.csv")
# vpsAllMonth <- st_read("data/output/vpsAllMonth.csv")
patternAllMonth <- st_read("data/output/patternAllMonth.csv")
knitr::opts_chunk$set(echo = TRUE)
library(vroom)
library(sf)
library(ggplot2)
library(ggmap)
library(kableExtra)
library(tidyverse)
library(data.table)
#remotes::install_github("CityOfPhiladelphia/rphl")
library(rphl)
library(lubridate)
library(furrr)
library(tidycensus)
library(rgdal)
library(furrr)
library(mapview)
ll <- function(dat, proj4 = 4326){st_transform(dat, proj4)}
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
#windowsFonts(font = windowsFont('Helvetica'))
crs = 'EPSG:2272'
plotTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.01),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.5),
strip.background = element_blank(),
strip.text = element_text( size=9),
axis.title = element_text( size=9),
axis.text = element_text( size=7),
axis.text.y = element_text( size=7),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text( size = 9),
legend.key.size = unit(.5, 'line')
)
}
mapTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=base_size),
axis.title = element_text( size=9),
axis.text = element_blank(),
axis.text.y = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text(size=base_size),
legend.key.size = unit(.5, 'line')
)
}
palette5 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e","#315d7f")
palette4 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e")
palette2 <- c("#f9b294","#f2727f")
palette1_main <- "#F2727F"
palette1_assist <- '#F9B294'
## NOTE: You will need to create secrets.json, using the template
## to enter private credentials for interacting with the database
get_secrets <- function() {
path <- "secrets/secrets.json"
if (!file.exists(path)) {
stop("Can't find secret file: '", path, "'")
}
jsonlite::read_json(path)
}
#secrets <- get_secrets()
# database settings
# dbname = secrets$db_name
# host = secrets$db_host
# port = secrets$db_port
# username =  secrets$db_username
# password = secrets$db_password
# census_api_key(secrets$census_api_key, install=TRUE, overwrite=TRUE)
brand_info <- vroom("data/safegraph/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-CORE_POI-2021_11-2021-12-17/brand_info.csv")
#colnames(brand_info)
# kable(head(brand_info,3),align = 'c',caption = '<center>Table 1. brand_info of SafeGraph data <center/>')%>%
#   kable_classic(full_width = F)%>%
#   kable_styling(position = "center")%>%
#   scroll_box(width = "100%", height = "400px")
core_poi <- vroom("data/safegraph/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-CORE_POI-2021_11-2021-12-17/core_poi.csv")
#colnames(core_poi)
# kable(head(core_poi,3),align = 'c',caption = '<center>Table 2. core_poi of SafeGraph data <center/>')%>%
#   kable_classic(full_width = F)%>%
#   kable_styling(position = "center")%>%
#   scroll_box(width = "100%", height = "400px")
# st_write(hpsAllMonth,"data/output/hpsAllMonth.csv")
# st_write(vpsAllMonth,"data/output/vpsAllMonth.csv")
# st_write(patternAllMonth,"data/output/patternAllMonth.csv")
# hpsAllMonth <- st_read("data/output/hpsAllMonth.csv")
# vpsAllMonth <- st_read("data/output/vpsAllMonth.csv")
# patternAllMonth <- st_read("data/output/patternAllMonth.csv")
philly <- st_read("https://opendata.arcgis.com/datasets/405ec3da942d4e20869d4e1449a2be48_0.geojson")
pprDistrict <- st_read('https://opendata.arcgis.com/datasets/0cdc4a1e86c6463b9600f9d9fca39875_0.geojson') %>%
st_transform(crs)
destDistrict <- pprDistrict %>% filter(DISTRICTID %in% c(7,8,9))
base_map <- get_map(location = unname(st_bbox(ll(st_buffer(st_union(pprDistrict),11000)))),maptype = "terrian")
ggmap(base_map) +
geom_sf(data=ll(st_union(pprDistrict)),color="black",size=2,fill = "transparent",inherit.aes = FALSE)+
geom_sf(data=ll(pprDistrict),color='black',size=2,fill = "transparent",inherit.aes = FALSE)+
geom_sf(data=ll(destDistrict),color=palette1_main,size=2,fill = "transparent",inherit.aes = FALSE)+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprProperties <- st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprProperties,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprServiceArea <- read_sf(dsn="data/FromPPR/PPR_Service_Areas_2021/PPR_Service_Areas_2021.shp")%>%
st_transform(crs = crs)
pprDestServiceArea <- pprServiceArea %>% filter(PPR_DIST %in% c(7,8,9))
ggplot() +
geom_sf(data=pprServiceArea,color='black',size=1,fill = "transparent")+
geom_sf(data=pprDestServiceArea,color=palette1_main,size=2,fill = "transparent")+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
program2021 <- vroom("data/FromPPR/PPR-programs-attended-2021-with-schedules.csv")
kable(head(program2021,3),align = 'c',caption = '<center>Table 8. Program information of PPR Programs data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "460px")
facilityID <- read.csv("data/FromPPR/tblFacility_to_PPR_Properties.csv")
# # replace "and" with "&"
# pprProperties <- pprProperties %>%
#   mutate(OFFICIAL_NAME = gsub("and", "&", pprProperties$OFFICIAL_NAME),
#          PUBLIC_NAME = gsub("and", "&", pprProperties$PUBLIC_NAME))
#
#
# # join method 1
# property.join1 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(ADDRESS_911, geometry),
#                           by=c("X911.Address"="ADDRESS_911"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # join method 2
# property.join2 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(OFFICIAL_NAME, geometry),
#                           by=c("PPR.Site.Name"="OFFICIAL_NAME"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # join method 3
# property.join3 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(PUBLIC_NAME, geometry),
#                           by=c("PPR.Site.Name"="PUBLIC_NAME"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # combine 3 methods together
# property <- rbind(property.join1,property.join2) %>%
#   rbind(property.join3,.) %>%
#   distinct() %>%
#   st_sf()
#
# x <- left_join(propertyArea, property, by="PPR.Site.Name") %>%
#   filter(st_is_empty(geometry))
# According to the email, we should directly use pprProperties to spatial join the service area to get the service area information. Therefore, the above code should be delete.
property <- st_join(st_centroid(pprProperties),pprServiceArea,left=TRUE) %>%
st_drop_geometry() %>%
left_join(pprProperties %>% dplyr::select(OBJECTID,geometry),by='OBJECTID') %>%
st_sf() %>%
st_transform(crs = 4326) %>%
dplyr::select(-Shape__Length,-Shape__Area,-Shape_Leng,-Shape_Area) %>%
rename('ServiceAreaID' = 'INFO')
# map the location of properties in district 7,8,9
ggplot() +
geom_sf(data=property %>% filter(PPR_DIST %in% c(7,8,9)),color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==7)),color="black",size=2,fill = "transparent")+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==8)),color="black",size=2,fill = "transparent")+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==9)),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDestServiceArea,color="black",size=0.75,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
#st_write(program2021.clean,"data/output/program2021.clean.csv")
# st_write(program2021.join.na,"data/output/program2021.join.na.csv")
# st_write(program2021.join,"data/output/program2021.join.csv")
program2021.clean <- st_read("data/output/program2021.clean.csv")
program2021.join.na <- st_read("data/output/program2021.join.na.csv")
program2021.join <- st_read("data/output/program2021.join.csv")
# filter into philly
safeGraph <- patternAllMonth %>%
filter(city == "Philadelphia")
View(pprServiceArea)
pprServiceArea <- read_sf(dsn="data/FromPPR/PPR_Service_Areas_2021/PPR_Service_Areas_2021.shp")%>%
st_transform(crs = crs)
pprDestServiceArea <- pprServiceArea %>% filter(PPR_DIST %in% c(7,8,9))
ggplot() +
geom_sf(data=pprServiceArea,color='black',size=1,fill = "transparent")+
geom_sf(data=pprDestServiceArea,color=palette1_main,size=2,fill = "transparent")+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
program2021 <- vroom("data/FromPPR/PPR-programs-attended-2021-with-schedules.csv")
kable(head(program2021,3),align = 'c',caption = '<center>Table 8. Program information of PPR Programs data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "460px")
facilityID <- read.csv("data/FromPPR/tblFacility_to_PPR_Properties.csv")
# # replace "and" with "&"
# pprProperties <- pprProperties %>%
#   mutate(OFFICIAL_NAME = gsub("and", "&", pprProperties$OFFICIAL_NAME),
#          PUBLIC_NAME = gsub("and", "&", pprProperties$PUBLIC_NAME))
#
#
# # join method 1
# property.join1 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(ADDRESS_911, geometry),
#                           by=c("X911.Address"="ADDRESS_911"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # join method 2
# property.join2 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(OFFICIAL_NAME, geometry),
#                           by=c("PPR.Site.Name"="OFFICIAL_NAME"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # join method 3
# property.join3 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(PUBLIC_NAME, geometry),
#                           by=c("PPR.Site.Name"="PUBLIC_NAME"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # combine 3 methods together
# property <- rbind(property.join1,property.join2) %>%
#   rbind(property.join3,.) %>%
#   distinct() %>%
#   st_sf()
#
# x <- left_join(propertyArea, property, by="PPR.Site.Name") %>%
#   filter(st_is_empty(geometry))
# According to the email, we should directly use pprProperties to spatial join the service area to get the service area information. Therefore, the above code should be delete.
property <- st_join(st_centroid(pprProperties),pprServiceArea,left=TRUE) %>%
st_drop_geometry() %>%
left_join(pprProperties %>% dplyr::select(OBJECTID,geometry),by='OBJECTID') %>%
st_sf() %>%
st_transform(crs = 4326) %>%
dplyr::select(-Shape__Length,-Shape__Area,-Shape_Leng,-Shape_Area) %>%
rename('ServiceAreaID' = 'INFO')
# map the location of properties in district 7,8,9
ggplot() +
geom_sf(data=property %>% filter(PPR_DIST %in% c(7,8,9)),color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==7)),color="black",size=2,fill = "transparent")+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==8)),color="black",size=2,fill = "transparent")+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==9)),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDestServiceArea,color="black",size=0.75,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
#st_write(program2021.clean,"data/output/program2021.clean.csv")
# st_write(program2021.join.na,"data/output/program2021.join.na.csv")
# st_write(program2021.join,"data/output/program2021.join.csv")
program2021.clean <- st_read("data/output/program2021.clean.csv")
program2021.join.na <- st_read("data/output/program2021.join.na.csv")
program2021.join <- st_read("data/output/program2021.join.csv")
# filter into philly
safeGraph <- patternAllMonth %>%
filter(city == "Philadelphia")
#HPS = home_panel_summary
#NS = normalization_stats
#VPS = visit_panel_summary
monthList = c("01","02","03","04","05","06","07","08","09","10","11")
# home_panel_summary
hpsAllMonth = data.frame()
for (i in monthList){
currentMonth = vroom(paste("data/safegraph/SafeGraph Data Purchase Dec-16-2021/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-PATTERNS-2021_",
i,
"-2021-12-17/home_panel_summary.csv",sep = ""))%>%
filter(region=="pa")
hpsAllMonth = rbind(hpsAllMonth,currentMonth)
#print(paste("Current input home_panel_summary dataframe is in ",i," month",sep = ""))
}
# kable(head(hpsAllMonth,3),align = 'c',caption = '<center>Table 3. home pannel summary of 2021 whole year in SafeGraph data <center/>')%>%
#   kable_classic(full_width = F)%>%
#   kable_styling(position = "center")%>%
#   scroll_box(width = "100%", height = "400px")
# normalization_Stats
nsAllMonth = data.frame()
for (i in monthList){
currentMonth = vroom(paste("data/safegraph/SafeGraph Data Purchase Dec-16-2021/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-PATTERNS-2021_",
i,
"-2021-12-17/normalization_stats.csv",sep = ""))%>%
filter(region=="pa")
nsAllMonth = rbind(nsAllMonth,currentMonth)
#print(paste("Current input normalization_stats dataframe is in ",i," month",sep = ""))
}
# kable(head(nsAllMonth,3),align = 'c',caption = '<center>Table 4. normalization stats of 2021 whole year in SafeGraph data <center/>')%>%
#   kable_classic(full_width = F)%>%
#   kable_styling(position = "center")%>%
#   scroll_box(width = "100%", height = "400px")
# visit_panel_summary
vpsAllMonth = data.frame()
for (i in monthList){
currentMonth = vroom(paste("data/safegraph/SafeGraph Data Purchase Dec-16-2021/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-PATTERNS-2021_",
i,
"-2021-12-17/visit_panel_summary.csv",sep = ""))%>%
filter(region=="pa")
vpsAllMonth = rbind(vpsAllMonth,currentMonth)
#print(paste("Current input visit_panel_summary dataframe is in ",i," month",sep = ""))
}
# kable(head(vpsAllMonth,3),align = 'c',caption = '<center>Table 5. visit panel summary of 2021 whole year in SafeGraph data <center/>')%>%
#   kable_classic(full_width = F)%>%
#   kable_styling(position = "center")%>%
#   scroll_box(width = "100%", height = "400px")
# Pattern
patternAllMonth = data.frame()
for (i in monthList){
currentMonth = vroom(paste("data/safegraph/SafeGraph Data Purchase Dec-16-2021/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-PATTERNS-2021_",
i,
"-2021-12-17/patterns.csv.gz",sep = ""))%>%
filter(region=="PA")%>%
mutate(month=paste(i,sep = ""))
patternAllMonth = rbind(patternAllMonth,currentMonth)
#print(paste("Current input patterns dataframe is in ",i," month",sep = ""))
}
# kable(head(patternAllMonth,3),align = 'c',caption = '<center>Table 6. patterns of 2021 whole year in SafeGraph data <center/>')%>%
#   kable_classic(full_width = F)%>%
#   kable_styling(position = "center")%>%
#   scroll_box(width = "100%", height = "400px")
philly <- st_read("https://opendata.arcgis.com/datasets/405ec3da942d4e20869d4e1449a2be48_0.geojson")
pprDistrict <- st_read('https://opendata.arcgis.com/datasets/0cdc4a1e86c6463b9600f9d9fca39875_0.geojson') %>%
st_transform(crs)
destDistrict <- pprDistrict %>% filter(DISTRICTID %in% c(7,8,9))
base_map <- get_map(location = unname(st_bbox(ll(st_buffer(st_union(pprDistrict),11000)))),maptype = "terrian")
ggmap(base_map) +
geom_sf(data=ll(st_union(pprDistrict)),color="black",size=2,fill = "transparent",inherit.aes = FALSE)+
geom_sf(data=ll(pprDistrict),color='black',size=2,fill = "transparent",inherit.aes = FALSE)+
geom_sf(data=ll(destDistrict),color=palette1_main,size=2,fill = "transparent",inherit.aes = FALSE)+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprProperties <- st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprProperties,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprServiceArea <- read_sf(dsn="data/FromPPR/PPR_Service_Areas_2021/PPR_Service_Areas_2021.shp")%>%
st_transform(crs = crs)
pprDestServiceArea <- pprServiceArea %>% filter(PPR_DIST %in% c(7,8,9))
ggplot() +
geom_sf(data=pprServiceArea,color='black',size=1,fill = "transparent")+
geom_sf(data=pprDestServiceArea,color=palette1_main,size=2,fill = "transparent")+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
program2021 <- vroom("data/FromPPR/PPR-programs-attended-2021-with-schedules.csv")
kable(head(program2021,3),align = 'c',caption = '<center>Table 8. Program information of PPR Programs data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "460px")
facilityID <- read.csv("data/FromPPR/tblFacility_to_PPR_Properties.csv")
# # replace "and" with "&"
# pprProperties <- pprProperties %>%
#   mutate(OFFICIAL_NAME = gsub("and", "&", pprProperties$OFFICIAL_NAME),
#          PUBLIC_NAME = gsub("and", "&", pprProperties$PUBLIC_NAME))
#
#
# # join method 1
# property.join1 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(ADDRESS_911, geometry),
#                           by=c("X911.Address"="ADDRESS_911"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # join method 2
# property.join2 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(OFFICIAL_NAME, geometry),
#                           by=c("PPR.Site.Name"="OFFICIAL_NAME"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # join method 3
# property.join3 <- left_join(propertyArea,
#                           pprProperties %>% dplyr::select(PUBLIC_NAME, geometry),
#                           by=c("PPR.Site.Name"="PUBLIC_NAME"), left=FALSE) %>%
#   filter(!st_is_empty(geometry))
#
# # combine 3 methods together
# property <- rbind(property.join1,property.join2) %>%
#   rbind(property.join3,.) %>%
#   distinct() %>%
#   st_sf()
#
# x <- left_join(propertyArea, property, by="PPR.Site.Name") %>%
#   filter(st_is_empty(geometry))
# According to the email, we should directly use pprProperties to spatial join the service area to get the service area information. Therefore, the above code should be delete.
property <- st_join(st_centroid(pprProperties),pprServiceArea,left=TRUE) %>%
st_drop_geometry() %>%
left_join(pprProperties %>% dplyr::select(OBJECTID,geometry),by='OBJECTID') %>%
st_sf() %>%
st_transform(crs = 4326) %>%
dplyr::select(-Shape__Length,-Shape__Area,-Shape_Leng,-Shape_Area) %>%
rename('ServiceAreaID' = 'INFO')
# map the location of properties in district 7,8,9
ggplot() +
geom_sf(data=property %>% filter(PPR_DIST %in% c(7,8,9)),color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==7)),color="black",size=2,fill = "transparent")+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==8)),color="black",size=2,fill = "transparent")+
geom_sf(data=st_union(pprDestServiceArea %>% filter(PPR_DIST ==9)),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDestServiceArea,color="black",size=0.75,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
#st_write(program2021.clean,"data/output/program2021.clean.csv")
# st_write(program2021.join.na,"data/output/program2021.join.na.csv")
# st_write(program2021.join,"data/output/program2021.join.csv")
program2021.clean <- st_read("data/output/program2021.clean.csv")
program2021.join.na <- st_read("data/output/program2021.join.na.csv")
program2021.join <- st_read("data/output/program2021.join.csv")
# filter into philly
safeGraph <- patternAllMonth %>%
filter(city == "Philadelphia")
# join with POI and brand data
safeGraph <- safeGraph %>%
left_join(core_poi %>% dplyr::select(placekey,location_name,top_category,sub_category,naics_code,latitude,longitude),
by=c("placekey"="placekey","location_name" = "location_name"),keep=FALSE)
# safeGraph <- safeGraph %>%
#   left_join(core_poi, by=c("placekey","parent_placekey","location_name","street_address","city","region","postal_code","safegraph_brand_ids","brands"),keep=FALSE) %>%
#   left_join(brand_info, by=c("safegraph_brand_ids"="safegraph_brand_id","brands"="brand_name","top_category","sub_category","naics_code"),keep=FALSE)
# create geometry from lat & lng
safeGraph.geo <-
safeGraph %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, agr = "constant", na.fail=FALSE)
#st_write(safeGraph.geo,"data/output/safeGraph.geo.GeoJSON")
safeGraph.geo <- st_read("data/output/safeGraph.geo.GeoJSON",crs = 4326)
View(program2021)
View(program2021.clean)
View(pprProperties)
library(RPostgres)
df_to_db <- function(conn, df, table_name) {
s <- df %>%
rename_all(tolower) %>%
rename_all({function (t) str_replace_all(t,"[^\\w]","_")})
st_write(obj = s, dsn = conn, Id(table = table_name))
}
conn <- dbConnect(Postgres(), dbname = dbname, host = host, port = port,
user = username, password = password)
## NOTE: You will need to create secrets.json, using the template
## to enter private credentials for interacting with the database
get_secrets <- function() {
path <- "secrets/secrets.json"
if (!file.exists(path)) {
stop("Can't find secret file: '", path, "'")
}
jsonlite::read_json(path)
}
secrets <- get_secrets()
# database settings
dbname = secrets$db_name
host = secrets$db_host
port = secrets$db_port
username =  secrets$db_username
password = secrets$db_password
census_api_key(secrets$census_api_key, install=TRUE, overwrite=TRUE)
library(RPostgres)
df_to_db <- function(conn, df, table_name) {
s <- df %>%
rename_all(tolower) %>%
rename_all({function (t) str_replace_all(t,"[^\\w]","_")})
st_write(obj = s, dsn = conn, Id(table = table_name))
}
conn <- dbConnect(Postgres(), dbname = dbname, host = host, port = port,
user = username, password = password)
#df_to_db(conn, tracts19_summary, "census_tracts")
df_to_db(conn, pprServiceArea, "ppr_serviceareas")
df_to_db(conn, pprProperties, "ppr_properties")
df_to_db(conn, program2021.clean, "ppr_programs")
# writing to postgres
# dbListTables(conn)
