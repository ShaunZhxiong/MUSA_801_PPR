#   theDistanceMatrix= append(theDistanceMatrix,list(theVector))
#   print(paste0("finish ...",i,"/",nrow(CensusData2)))
# }
#
# theDistanceMatrix2 <- theDistanceMatrix
# daFrame <- as.data.frame(matrix(unlist(theDistanceMatrix2), nrow=length(theDistanceMatrix2), byrow=TRUE))
#st_write(daFrame,"data/output/theDistanceMatrixWhole.csv")
theDistanceMatrixWhole <- st_read("data/output/theDistanceMatrixWhole.csv")
theDistanceMatrixWhole <- setNames(theDistanceMatrixWhole, modelPlacesFinal$placekey)
theDistanceMatrixWhole <-
merge(theDistanceMatrixWhole, CensusData2 %>% dplyr::select(GEOID), by = "row.names") %>%
dplyr::select(-Row.names)
theDistanceMatrixWhole2 <-
theDistanceMatrixWhole %>%
pivot_longer(!GEOID, names_to = "placekey", values_to = "distance")
# calculate probability
prob <- modelData %>%
group_by(origin) %>%
summarise(total = sum(visitors)) %>%
left_join(modelData, by="origin") %>%
mutate(probability = visitors/total) %>%
dplyr::select(placekey, origin, probability)
# Based on the distance panel
huffData <-
theDistanceMatrixWhole2 %>%
left_join(prob,by=c("placekey"="placekey","GEOID"="origin")) %>%
mutate(probability = replace_na(probability, 4.4e-5))
# here drop_na is to get the data of DIstrict 7,8,9
huffWithLargeAttract <-
huffData %>%
left_join(LargePCAAttTogo %>% st_drop_geometry(),by="placekey") %>%
drop_na()
huffWithSmallAttract <-
huffData %>%
left_join(smallPCAAttTogo %>% st_drop_geometry(),by="placekey") %>%
drop_na()
# find the naics code that has most smae-day visits
# unnest the related_same_day_brand
# relatedBrand <-
#   PPRmoves %>%
#   select(placekey, related_same_day_brand, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(related_same_day_brand = future_map(related_same_day_brand, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble() %>%
#       gather()
#   }))
#
# relatedBrand <- relatedBrand %>%
#   unnest(related_same_day_brand) %>%
#   rename(relatedBrand =key ,visitors= value)
#
# st_write(relatedBrand,"data/output/relatedBrand.GeoJSON")
# relatedBrand <- st_read("data/output/relatedBrand.GeoJSON",crs=crs)
# relatedBrand <- relatedBrand %>%
#   dplyr::select(-placekey,-month) %>%
#   st_drop_geometry() %>%
#   group_by(relatedBrand) %>%
#   summarize(totalVisitors = sum(visitors))
#
# # connect this dataframe with naics code
# core_poi <- vroom("data/safegraph/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-CORE_POI-2021_11-2021-12-17/core_poi.csv")
# relatedNaics <- core_poi %>% dplyr::select(brands,naics_code) %>% distinct() %>% drop_na()
#
# relatedBrandWithNaics <-
#   relatedBrand %>%
#   left_join(relatedNaics,by=c("relatedBrand" = "brands")) %>%
#   drop_na() %>%
#   group_by(naics_code) %>%
#   summarise(totalVisitors = sum(totalVisitors)) %>%
#   filter(totalVisitors>365)
#
# relatedBrandWithNaics$naics_code <- as.factor(relatedBrandWithNaics$naics_code)
# st_write(relatedBrandWithNaics,"data/output/relatedBrandWithNaics.csv")
relatedBrandWithNaics <- st_read("data/output/relatedBrandWithNaics.csv")
relatedBrandWithNaics$totalVisitors <- as.numeric(relatedBrandWithNaics$totalVisitors)
relatedBrandWithNaics%>%
arrange(-totalVisitors) %>%
mutate(naics_code = factor(naics_code, naics_code)) %>%
ggplot(aes(x=naics_code, y=totalVisitors)) +
geom_bar(position ="dodge",fill = palette1_main,stat='identity') +
labs(x="Naics Code", y="Total Visitors") +
plotTheme(5,5)+
theme(
axis.text = element_text( size=5,angle = 90),
strip.text = element_text( size=5),
strip.text.x = element_text( size = 5))
# use the same naics code to get the safegraph poi data to construct naics code's location
# 445120 - Convenience Stores
# 722513 - 	Limited-Service Restaurants
# 722515 - Snack and Nonalcoholic Beverage Bars
# 452319 - All Other General Merchandise Stores
# 447110 - Gasoline Stations with Convenience Stores
# use number of visits as their attractiveness
pprRelatedNaicsMoves <- function(pprRelatedNaics, safeGraph.geo) {
safeGraph.geo$raw_visitor_counts = as.numeric(safeGraph.geo$raw_visitor_counts)
moves <- safeGraph.geo %>%
filter(naics_code==pprRelatedNaics) %>%
dplyr::select(placekey, location_name, raw_visitor_counts) %>%
group_by(placekey) %>%
summarise(visits = sum(raw_visitor_counts))
return(moves)
}
# centrality with RESTAURANT variable
pprRelatedNaics = 722513
restSurroundEffect <- pprRelatedNaicsMoves(pprRelatedNaics, safeGraph.geo)
# centrality with Convenient variable
pprRelatedNaics = 445120
convenientSurroundEffect <- pprRelatedNaicsMoves(pprRelatedNaics, safeGraph.geo)
# centrality with Park variable
parksSurroundEffect <- attracGEO
# visualized
rbind(restSurroundEffect %>% mutate(label="restaurant") %>% dplyr::select(-visits),
convenientSurroundEffect %>% mutate(label="convinient store")%>% dplyr::select(-visits),
parksSurroundEffect %>% mutate(label="park")) %>%
ggplot() +
geom_sf(data=pprServiceArea,color='black',size=0.35,fill= "transparent")+
geom_sf(data=pprDistrict,color='black',size=0.5,fill= "transparent")+
geom_sf(color = palette1_main,fill = palette1_main,alpha = 0.3) +
facet_wrap(~label)+
mapTheme()+
theme(legend.position = "bottom",
legend.key.width = unit(0.5, 'cm'),
legend.key.height  = unit(0.2, 'cm'))
View(huffData)
View(huffWithLargeAttract)
View(modelData)
huffWithLargeAttract %>% filter(GEOID=="421010149003")
huffWithLargeAttract %>% filter(GEOID=="421010149003") %>% sum(probability)
huffWithLargeAttract %>% filter(GEOID=="421010149003") %>% sum("probability")
huffWithLargeAttract$probability <- as.numeric(huffWithLargeAttract$probability)
huffWithLargeAttract %>% filter(GEOID=="421010149003") %>% sum("probability")
attempt <- huffWithLargeAttract %>% filter(GEOID=="421010149003")
View(attempt)
attempt <- huffWithLargeAttract %>% filter(GEOID=="421010030011")
attempt <- huffWithLargeAttract %>% filter(GEOID=="421010008033")
sum(attempt$probability)
View(modelData)
attempt <- huffWithLargeAttract %>% filter(GEOID=="421010158004")
sum(attempt$probability)
View(prob)
modelData <-
left_join(originCount_11m, propertyWithPlaceKey %>%
st_drop_geometry() %>%
filter(NESTED == "N") %>%
dplyr::select(placekey, ACREAGE),by="placekey") %>%
rename(c("area" = "ACREAGE"))
count(unique(modelData$placekey))
sum(unique(modelData$placekey))
unique(modelData$placekey)
View(originCount_11m)
unique(originCount_11m$placekey)
View(originCount)
View(excepList)
excepListog <- st_read("data/FromPPR/exceptionListPPR_Properties.csv")
excepList <- excepListog %>% filter(Exclude=="Yes")
excepList$OBJECTID <- as.numeric(excepList$OBJECTID)
excepList <- excepList %>%
dplyr::select(OBJECTID) %>%
left_join(propertyWithPlaceKey %>% st_drop_geometry() %>%  dplyr::select(OBJECTID,placekey),by="OBJECTID") %>%
drop_na()
View(excepList)
originCount_11m <- originCount %>%
st_drop_geometry() %>%
left_join(excepList,by="placekey") %>%
filter(is.na(OBJECTID)) %>%
dplyr::select(-OBJECTID) %>%
group_by(placekey, origin) %>%
summarise(visitors = sum(visitors)) %>%
ungroup() %>%
filter(origin %in% CensusData$GEOID)
modelData <-
left_join(originCount_11m, propertyWithPlaceKey %>%
st_drop_geometry() %>%
filter(NESTED == "N") %>%
dplyr::select(placekey, ACREAGE),by="placekey") %>%
rename(c("area" = "ACREAGE"))
attractivenssData <-
modelData %>%
dplyr::select(-origin,-visitors) %>%
distinct() %>%
left_join(parks %>% dplyr::select(placekey),by="placekey")%>%
st_sf() %>%
filter(!st_is_empty(geometry))
attracGEO <- attractivenssData %>% dplyr::select(placekey)
View(attractivenssData)
# filter to get district 7,8,9
attracGEO789 <-
st_join(attractivenssDataOutput,
pprDistrict %>%
filter(DISTRICTID %in% c(7,8,9)) %>%
dplyr::select(DISTRICTID),
left=TRUE) %>%
filter(!is.na(DISTRICTID))
View(attracGEO789)
# join the visits
attracGEO789VISIT <- st_read("data/output/sumVisit.GEOJSON") %>%
st_drop_geometry() %>%
inner_join(attracGEO789 %>% st_drop_geometry(),by="placekey")
# correlation matrix among predictors to see if some of them are highly correlated
attracGEO789.cor = cor(attracGEO789VISIT %>%
dplyr::select(-placekey, -DISTRICTID), method="spearman")
corrplot(attracGEO789.cor,method="number", tl.cex = 0.75, type = "lower")
corrplot(attracGEO789.cor,method="number", tl.cex = 0.75, type = "lower")
# -----------Large Attractiveness----------------
pcaDF <- attracGEO789VISIT %>% dplyr::select(-visits,-placekey, -DISTRICTID)
pca = prcomp(pcaDF, center = TRUE, scale. = TRUE)
names(pca)
# decide the number of components
components = 1:ncol(pcaDF)
plot(pca$sdev ~ components, ylab = "PCA Standard Deviation", xlab = "Component", pch = 19, type = "b")
abline(v = 5, col = "red")
components = 1:ncol(pcaDF)
plot(pca$sdev ~ components, ylab = "PCA Standard Deviation", xlab = "Component", pch = 19, type = "b")
abline(v = 5, col = "red")
View(smallPCAAttTogo)
View(modelData)
View(modelData)
# calculate probability
prob <- modelData %>%
filter(placekey %in% attracGEO789$placekey) %>%
group_by(origin) %>%
summarise(total = sum(visitors)) %>%
left_join(modelData, by="origin") %>%
mutate(probability = visitors/total) %>%
dplyr::select(placekey, origin, probability)
# calculate probability
prob <- modelData %>%
# filter(placekey %in% attracGEO789$placekey) %>%
group_by(origin) %>%
summarise(total = sum(visitors)) %>%
left_join(modelData, by="origin") %>%
mutate(probability = visitors/total) %>%
dplyr::select(placekey, origin, probability)
attracGEO789$placekey
unique(modelData$placekey)
# calculate probability
prob <- modelData %>%
filter(placekey %in% attracGEO789$placekey) %>%
group_by(origin) %>%
summarise(total = sum(visitors)) %>%
left_join(modelData, by="origin") %>%
mutate(probability = visitors/total) %>%
dplyr::select(placekey, origin, probability)
# Based on the distance panel
huffData <-
theDistanceMatrixWhole2 %>%
left_join(prob,by=c("placekey"="placekey","GEOID"="origin")) %>%
mutate(probability = replace_na(probability, 4.4e-5))
# here drop_na is to get the data of DIstrict 7,8,9
huffWithLargeAttract <-
huffData %>%
left_join(LargePCAAttTogo %>% st_drop_geometry(),by="placekey") %>%
drop_na()
huffWithSmallAttract <-
huffData %>%
left_join(smallPCAAttTogo %>% st_drop_geometry(),by="placekey") %>%
drop_na()
# st_write(huffWithSmallAttract, "data/output/RealModelData.csv")
huffWithSmallAttract %>% filter(placekey=="421010158004")
View(huffWithSmallAttract)
huffWithSmallAttract %>% filter(placekey=="421010149003")
huffWithSmallAttract %>% filter(origin=="421010149003")
huffWithSmallAttract %>% filter(GEOID=="421010149003")
attempt <- huffWithSmallAttract %>% filter(GEOID=="421010149003")
sum(attempt$probability)
unique(huffWithSmallAttract$GEOID)
geoList <- unique(huffWithSmallAttract$GEOID)
for (i in 1:1336) {
geoList <- unique(huffWithSmallAttract$GEOID)
attempt <- huffWithSmallAttract %>% filter(GEOID==geoList[i])
print(sum(attempt$probability))
}
## park info
# RealModelData <- st_read("data/output/RealModelData.csv") %>%
RealModelData <- huffWithSmallAttract %>%
mutate(distance = as.numeric(distance),
probability = as.numeric(probability),
PC1 = as.numeric(PC1),
PC2 =as.numeric(PC2),
PC3 =as.numeric(PC3),
PC4 =as.numeric(PC4),
PC5 =as.numeric(PC5))
# transform PC to positive values
RealModelData <- RealModelData %>%
mutate(PC1 = PC1-min(RealModelData$PC1),
PC2 = PC2-min(RealModelData$PC2),
PC3 = PC3-min(RealModelData$PC3),
PC4 = PC4-min(RealModelData$PC4),
PC5 = PC5-min(RealModelData$PC5))
## neighbor attr and geometry - Here is convenient stores
convenientSurroundEffect <- st_read("data/output/convenientSurroundEffect.GeoJSON")
### Model Function
fit <- fit_parameter(data = RealModelData,
places = modelPlacesFinal,
neighbor_data = convenientSurroundEffect,
neighbor_id_column="placekey",
neighbor_attr_column ="visits",
id_column="placekey",
attr_column =c("PC1","PC2","PC3","PC4","PC5"),
distance_column="distance",
probability_column="probability",
origin_column = "GEOID",
k=3)
## park info
RealModelData <- st_read("data/output/RealModelData.csv") %>%
mutate(distance = as.numeric(distance),
probability = as.numeric(probability),
PC1 = as.numeric(PC1),
PC2 =as.numeric(PC2),
PC3 =as.numeric(PC3),
PC4 =as.numeric(PC4),
PC5 =as.numeric(PC5))
## park info
RealModelData <- st_read("data/output/RealModelData.csv") %>%
mutate(distance = as.numeric(distance),
probability = as.numeric(probability),
PC1 = as.numeric(PC1),
PC2 =as.numeric(PC2),
PC3 =as.numeric(PC3),
PC4 =as.numeric(PC4),
PC5 =as.numeric(PC5))
# transform PC to positive values
RealModelData <- RealModelData %>%
mutate(PC1 = PC1-min(RealModelData$PC1),
PC2 = PC2-min(RealModelData$PC2),
PC3 = PC3-min(RealModelData$PC3),
PC4 = PC4-min(RealModelData$PC4),
PC5 = PC5-min(RealModelData$PC5))
## park geometry
RealModelPlaces <- st_read("data/output/attracGEO.GeoJSON") %>%
filter(placekey %in% unique(RealModelData$placekey))
## neighbor attr and geometry - Here is convenient stores
convenientSurroundEffect <- st_read("data/output/convenientSurroundEffect.GeoJSON")
### Model Function
fit <- fit_parameter(data = RealModelData,
places = modelPlacesFinal,
neighbor_data = convenientSurroundEffect,
neighbor_id_column="placekey",
neighbor_attr_column ="visits",
id_column="placekey",
attr_column =c("PC1","PC2","PC3","PC4","PC5"),
distance_column="distance",
probability_column="probability",
origin_column = "GEOID",
k=3)
View(RealModelData)
modelPlacesFinal <- attracGEO %>%
mutate(parkLat = latParks)%>%
mutate(parkLng = lngParks) %>%
st_drop_geometry()
#
# lngParks = map(modelPlaces,function(x){
#   medium = str_split(x,",")
#   medium = medium[[1]][1]
#   return(medium)
# })
#
# latParks = unlist(latParks)
# lngParks = unlist(lngParks)
#
modelPlacesFinal <- attracGEO %>%
mutate(parkLat = latParks)%>%
mutate(parkLng = lngParks) %>%
st_drop_geometry()
View(RealModelPlaces)
### Model Function
fit <- fit_parameter(data = RealModelData,
places = RealModelPlaces,
neighbor_data = convenientSurroundEffect,
neighbor_id_column="placekey",
neighbor_attr_column ="visits",
id_column="placekey",
attr_column =c("PC1","PC2","PC3","PC4","PC5"),
distance_column="distance",
probability_column="probability",
origin_column = "GEOID",
k=3)
## park info
RealModelData <- st_read("data/output/RealModelData.csv") %>%
mutate(distance = as.numeric(distance),
probability = as.numeric(probability),
PC1 = as.numeric(PC1),
PC2 =as.numeric(PC2),
PC3 =as.numeric(PC3),
PC4 =as.numeric(PC4),
PC5 =as.numeric(PC5))
# transform PC to positive values
RealModelData <- RealModelData %>%
mutate(PC1 = PC1-min(RealModelData$PC1),
PC2 = PC2-min(RealModelData$PC2),
PC3 = PC3-min(RealModelData$PC3),
PC4 = PC4-min(RealModelData$PC4),
PC5 = PC5-min(RealModelData$PC5))
## park geometry
RealModelPlaces <- st_read("data/output/attracGEO.GeoJSON") %>%
filter(placekey %in% unique(RealModelData$placekey))
## neighbor attr and geometry - Here is convenient stores
convenientSurroundEffect <- st_read("data/output/convenientSurroundEffect.GeoJSON")
### Model Function
fit <- fit_parameter(data = RealModelData,
places = modelPlacesFinal,
neighbor_data = convenientSurroundEffect,
neighbor_id_column="placekey",
neighbor_attr_column ="visits",
id_column="placekey",
attr_column =c("PC1","PC2","PC3","PC4","PC5"),
distance_column="distance",
probability_column="probability",
origin_column = "GEOID",
k=3)
source("huffModelScripts2.R")
### Model Function
fit <- fit_parameter(data = RealModelData,
places = modelPlacesFinal,
neighbor_data = convenientSurroundEffect,
neighbor_id_column="placekey",
neighbor_attr_column ="visits",
id_column="placekey",
attr_column =c("PC1","PC2","PC3","PC4","PC5"),
distance_column="distance",
probability_column="probability",
origin_column = "GEOID",
k=3)
### Model Function
fit <- fit_parameter(data = RealModelData,
places = RealModelPlaces,
neighbor_data = convenientSurroundEffect,
neighbor_id_column="placekey",
neighbor_attr_column ="visits",
id_column="placekey",
attr_column =c("PC1","PC2","PC3","PC4","PC5"),
distance_column="distance",
probability_column="probability",
origin_column = "GEOID",
k=3)
## park info
# RealModelData <- st_read("data/output/RealModelData.csv") %>%
RealModelData <- huffWithSmallAttract %>%
mutate(distance = as.numeric(distance),
probability = as.numeric(probability),
PC1 = as.numeric(PC1),
PC2 =as.numeric(PC2),
PC3 =as.numeric(PC3),
PC4 =as.numeric(PC4),
PC5 =as.numeric(PC5))
# transform PC to positive values
RealModelData <- RealModelData %>%
mutate(PC1 = PC1-min(RealModelData$PC1),
PC2 = PC2-min(RealModelData$PC2),
PC3 = PC3-min(RealModelData$PC3),
PC4 = PC4-min(RealModelData$PC4),
PC5 = PC5-min(RealModelData$PC5))
## park geometry
RealModelPlaces <- st_read("data/output/attracGEO.GeoJSON") %>%
filter(placekey %in% unique(RealModelData$placekey))
## neighbor attr and geometry - Here is convenient stores
convenientSurroundEffect <- st_read("data/output/convenientSurroundEffect.GeoJSON")
### Model Function
fit <- fit_parameter(data = RealModelData,
places = RealModelPlaces,
neighbor_data = convenientSurroundEffect,
neighbor_id_column="placekey",
neighbor_attr_column ="visits",
id_column="placekey",
attr_column =c("PC1","PC2","PC3","PC4","PC5"),
distance_column="distance",
probability_column="probability",
origin_column = "GEOID",
k=3)
View(fit)
View(RealModelData)
View(RealModelData)
View(huffWithSmallAttract)
View(convenientSurroundEffect)
parameter <- fit %>%
dplyr::select(parameter) %>%
unnest(cols="parameter")
parameter
View(parameter)
data <- fit %>%
dplyr::select(data) %>%
# x <- centrality(destination="222-222@628-pg9-2hq",
#                 data = modelData %>% filter(placekey!="zzw-222@628-pj6-9pv"),
#                            places = modelPlaces,
#                            neighbor_data = modelPlaces,
#                            neighbor_id_column="placekey",
#                            neighbor_attr_column ="attr",
#                            id_column="placekey",
#                            k=3)
#
# x <- centrality_to_df(data = modelData %>% filter(placekey!="zzw-222@628-pj6-9pv"),
#                            places = modelPlaces,
#                            neighbor_data = modelPlaces,
#                            neighbor_id_column="placekey",
#                            neighbor_attr_column ="attr",
#                            id_column="placekey",
#                            k=3)
data <- fit %>%
dplyr::select(data) %>%
hist(parameter$r2)
hist(parameter$r2)
avg(parameter$r2)
mean(parameter$r2)
for (i in 1:1336) {
View(huffWithSmallAttract)
unique(huffWithSmallAttract$GEOID)
unique(huffWithSmallAttract$GEOID)
sum(huffWithSmallAttract$probability)
knitr::opts_chunk$set(echo = TRUE)
