mapTheme()
pprAdExercise <- st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppr_adult_exercise_equipment&filename=ppr_adult_exercise_equipment&format=geojson&skipfields=cartodb_id')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprAdExercise,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprSwimmingPool <- st_read('https://opendata.arcgis.com/datasets/c6f6176968f04d3f88adbc4c362af55d_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprSwimmingPool,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprTennisCourt <- st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppr_tennis_courts&filename=ppr_tennis_courts&format=geojson&skipfields=cartodb_id')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprTennisCourt,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprSpraygrounds <- st_read('https://opendata.arcgis.com/datasets/a148cc904d374b22bd456e44a044d554_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprSpraygrounds,color=palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprHydrationStations <- st_read('https://opendata.arcgis.com/datasets/cc35dc98180249fb9a6f2f5f06657df1_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprHydrationStations,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprPlaygrounds <- st_read('https://opendata.arcgis.com/datasets/899c807e205244278b3f39421be8489c_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprPlaygrounds,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprBoatLaunches <- st_read('https://opendata.arcgis.com/api/v3/datasets/ba32e1ac9c5341e1916274c2df3fbe22_0/downloads/data?format=geojson&spatialRefId=4326')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprBoatLaunches,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprBuildingStructures <- st_read('https://opendata.arcgis.com/datasets/97e90a049a35453ba0c51f974b3c77b4_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprBuildingStructures,color=palette1_main,size=1,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
query <- paste("SELECT objectid, avg_height, shape_area",
"FROM ppr_tree_canopy_outlines_2015",
"ORDER BY objectid ASC")
pprTreeCanopyWithArea <- get_carto(query, format = "csv",
base_url = "https://phl.carto.com/api/v2/sql", stringsAsFactors = F)
pprTreeCanopy <- st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppr_tree_canopy_points_2015&filename=ppr_tree_canopy_points_2015&format=geojson&skipfields=cartodb_id')%>%
st_transform(crs)%>%
left_join(pprTreeCanopyWithArea,by = "objectid")
ggplot() +
geom_sf(data=pprTreeCanopy,color=palette1_main,aes(size=shape_area),fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprPermittableSpace <- st_read('https://opendata.arcgis.com/datasets/811b67c999bd4e839abb68b16c16f623_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprPermittableSpace,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
library(rgdal)
pprServiceArea <- read_sf(dsn="data/FromPPR/PPR_Service_Areas_2021/PPR_Service_Areas_2021.shp")%>%
st_transform(crs = crs)
ggplot() +
geom_sf(data=pprServiceArea,color=palette1_main,size=1,fill = "transparent")+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
perimit2021 <- vroom("data/FromPPR/PPR-recreation-permits-2021.csv")
kable(head(perimit2021,3),align = 'c',caption = '<center>Table 7. Program information of PPR Recreation data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
program2021 <- vroom("data/FromPPR/PPR-programs-attended-2021-with-schedules.csv")
kable(head(program2021,3),align = 'c',caption = '<center>Table 8. Program information of PPR Programs data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
propertyArea <- read.csv("data/FromPPR/Service_Area_Sites.csv")
facilityID <- read.csv("data/FromPPR/tblFacility_to_PPR_Properties.csv")
# replace "and" with "&"
pprProperties <- pprProperties %>%
mutate(OFFICIAL_NAME = gsub("and", "&", pprProperties$OFFICIAL_NAME),
PUBLIC_NAME = gsub("and", "&", pprProperties$PUBLIC_NAME))
# join method 1
property.join1 <- left_join(propertyArea,
pprProperties %>% dplyr::select(ADDRESS_911, geometry),
by=c("X911.Address"="ADDRESS_911"), left=FALSE) %>%
filter(!st_is_empty(geometry))
# join method 2
property.join2 <- left_join(propertyArea,
pprProperties %>% dplyr::select(OFFICIAL_NAME, geometry),
by=c("PPR.Site.Name"="OFFICIAL_NAME"), left=FALSE) %>%
filter(!st_is_empty(geometry))
# join method 3
property.join3 <- left_join(propertyArea,
pprProperties %>% dplyr::select(PUBLIC_NAME, geometry),
by=c("PPR.Site.Name"="PUBLIC_NAME"), left=FALSE) %>%
filter(!st_is_empty(geometry))
# combine 3 methods together
property <- rbind(property.join1,property.join2) %>%
rbind(property.join3,.) %>%
distinct() %>%
st_sf()
x <- left_join(propertyArea, property, by="PPR.Site.Name") %>%
filter(st_is_empty(geometry))
# define date
program2021.clean <- program2021 %>%
mutate(AttendanceWeekDate = mdy(AttendanceWeekDate),
DateFrom = mdy(DateFrom),
DateTo = mdy(DateTo))
# create a df only containing records without program scheduel info
program2021.NA <- program2021.clean[is.na(program2021.clean$ProgramScheduleID),]
# filter by attendance date
program2021.clean <- program2021.clean %>%
filter(AttendanceWeekDate > DateFrom & AttendanceWeekDate < DateTo)
# original data is recorded by week, here we change it into being recorded by occurence
program2021.clean <- separate(program2021.clean, Days,into= c("1","2","3","4","5","6","7"))
program2021.clean <- program2021.clean %>%
gather(colNames, weekday, 15:21) %>%
select(-colNames) %>%
na.omit(cols='weekday')
# create exact attendance date
program2021.clean <- program2021.clean %>%
mutate(AttendenceRealDate = case_when(
weekday == "Monday" ~ AttendanceWeekDate,
weekday == "Tuesday" ~ AttendanceWeekDate+1,
weekday == "Wednesday" ~ AttendanceWeekDate+2,
weekday == "Thursday" ~ AttendanceWeekDate+3,
weekday == "Friday" ~ AttendanceWeekDate+4,
weekday == "Saturday" ~ AttendanceWeekDate+5,
weekday == "Sunday" ~ AttendanceWeekDate+6,
))
propertyParent <- pprProperties %>%
filter(NESTED=="N")
propertyKid <- pprProperties %>%
filter(NESTED=="Y")
program2021.join <- left_join(program2021.clean, facilityID, by =c("FacilityID")) %>%
left_join(., pprProperties, by =c("PPR_Properties_ObjectID"="OBJECTID"))
# filter into philly
safeGraph <- patternAllMonth %>%
filter(city == "Philadelphia")
# join with POI and brand data
safeGraph <- safeGraph %>%
left_join(core_poi, by=c("placekey","parent_placekey","location_name","street_address","city","region","postal_code","safegraph_brand_ids","brands"),keep=FALSE) %>%
left_join(brand_info, by=c("safegraph_brand_ids"="safegraph_brand_id","brands"="brand_name","top_category","sub_category","naics_code"),keep=FALSE)
# create geometry from lat & lng
safeGraph.geo <-
safeGraph %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, agr = "constant", na.fail=FALSE) %>% st_transform(crs = crs)
## set future running stratege
library(furrr)
# change workers number by yourself
plan(multiprocess, workers = 8)
# keep congeneric bussiness
congenericMoves <-
safeGraph.geo %>%
filter(top_category %in% c("Promoters of Performing Arts, Sports, and Similar Events",
"Other Amusement and Recreation Industries",
"Museums, Historical Sites, and Similar Institutions") | str_detect(location_name, "Park") | str_detect(location_name, "Playground") | str_detect(location_name, "Recreation Center")) %>%
filter(str_detect(location_name, "Parking", negate = TRUE))
# Keep only ppr sites
#712190:Nature Parks and Other Similar Institutions;
#713990:All Other Amusement and Recreation Industries;
#713940: Fitness and Recreational Sports Centers；
#711310：Promoters of Performing Arts, Sports, and Similar Events
parks <- safeGraph.geo %>%
dplyr::select(placekey, naics_code, location_name) %>%
distinct() %>%
filter(naics_code %in% c(712190, 713990, 713940, 711310) | str_detect(location_name, "Park") | str_detect(location_name, "Playground") | str_detect(location_name, "Recreation Center")) %>%
filter(str_detect(location_name, "Parking", negate = TRUE))
PPRmoves <- safeGraph.geo %>%
filter(placekey %in% as.list(parks$placekey))
# spatial join with ppr sites - to be continued
# we need ask instructors which data to model, but for now just take PPRmoves
# join filtered safeGraph place with ppr property
property_safe_join <- st_join(property, parks %>% dplyr::select(placekey, geometry), left=FALSE)
# count
print(paste0("The number of PPR properties is ", n_distinct(property$PPR.Site.Name)))
print(paste0("The number joined properties is ", n_distinct(property_safe_join$PPR.Site.Name)))
# the filtering quality is okay at this point, more data will be added
# unnest visit Count data
visitCount <-
PPRmoves %>%
select(placekey, date_range_start, date_range_end, visits_by_day) %>%
mutate(date_range_start = as_date(date_range_start),
date_range_end = as_date(date_range_end),
month =  month(date_range_start)) %>%
dplyr::select(-date_range_start, -date_range_end) %>%
mutate(visits_by_day = str_remove_all(visits_by_day, pattern = "\\[|\\]")) %>%
mutate(visits_by_day = str_split(visits_by_day, pattern = ",")) %>%
mutate(visits_by_day = future_map(visits_by_day, function(x){
unlist(x) %>%
as_tibble() %>%
rowid_to_column(var = "day") %>%
mutate(visits = value) %>%
dplyr::select(-value)
})) %>%
unnest(cols = c("visits_by_day"))
# unnest the origin-destination data
# originCount <-
#   PPRmoves %>%
#   select(placekey, visitor_home_cbgs, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(visitor_home_cbgs = future_map(visitor_home_cbgs, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble()
#   })) %>%
#   unnest(visitor_home_cbgs)
#
# originCount <- originCount %>%
#   dplyr::select(placekey, month, starts_with("4")) %>%
#   pivot_longer(cols = starts_with("4"), names_to = "origin", values_to = "visits", values_drop_na = TRUE)
#st_write(originCount,"data/output/originCount.GeoJSON")
originCount <- st_read("data/output/originCount.GeoJSON")
ggplot()+
geom_point(data = PPRmoves,
aes(y = latitude, x = longitude, color = raw_visitor_counts,
fill = raw_visitor_counts, size = raw_visitor_counts),
alpha = 0.5)
st_write(obj = pprDistrict, dsn = conn, Id(table = "districts"))
library(RPostgres)
conn <- dbConnect(Postgres(), dbname = dbname, host = host, port = port,
user = username, password = password)
st_write(obj = pprDistrict, dsn = conn, Id(table = "districts"))
tracts19 <-
get_acs(geography = "blockgroup",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
acs_vars <- c("B25026_001E","B02001_002E","B15001_050E",
"B15001_009E","B19013_001E","B25058_001E",
"B06012_002E", "B01001_048E", "B01001_049E",
"B01001_024E", "B01001_025E", "B07013_002E")
blocks19 <-
get_acs(geography = "blockgroup",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
blocks19 <-
get_acs(geography = "block",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
blocks19 <-
get_decennial(geography = "block",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
blocks19 <-
get_decennial(geography = "block",
variables = acs_vars,
year=2010,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
blocks19 <-
get_decennial(geography = "block",
variables = acs_vars,
year=2010,
state='PA',
county='Philadelphia',
geometry=T,
output="wide")
blocks10 <-
get_decennial(geography= "block",
variables = c("P005003", "P005004", "P005006", "P004003"),
year = 2010,
state='PA',
county='Philadelphia',
geometry=T,
output="wide")
tracts19 <-
get_acs(geography = "block",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
tracts19 <-
get_acs(geography = "sdoijv",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
blocks10 <-
get_decennial(geography= "block",
# TODO: Replace w/ equivalent ACS variables
# variables = c("P005003", "P005004", "P005006", "P004003"),
year = 2020,
state='PA',
county='Philadelphia',
geometry=T,
output="wide")
blocks10 <-
get_decennial(geography= "block",
# TODO: Replace w/ equivalent ACS variables
variables = c("P005003", "P005004", "P005006", "P004003"),
year = 2020,
state='PA',
county='Philadelphia',
geometry=T,
output="wide")
tracts19 <-
get_acs(geography = "block group",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
tracts19 <-
get_acs(geography = "block group",
variables = acs_vars,
year=2021,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
tracts19 <-
get_acs(geography = "block group",
variables = acs_vars,
year=2019,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
tracts19 <-
get_acs(geography = "block group",
variables = acs_vars,
year=2021,
state='PA',
county='Philadelphia',
geometry=T,
output="wide") %>%
st_transform(crs) %>%
dplyr::rename(TotalPop = B25026_001E,
White = B02001_002E,
MedianHouseholdIncome = B19013_001E,
MedianRent = B25058_001E,
Poverty = B06012_002E,
HousingUnits = B07013_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctNonWhite = ifelse(TotalPop < White, 0, ifelse(TotalPop > 0, 1 -(White / TotalPop),0)),
pctPoverty = ifelse(TotalPop > 0, Poverty / TotalPop, 0))
