kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
# normalization_Stats
nsAllMonth = data.frame()
for (i in monthList){
currentMonth = vroom(paste("data/safegraph/SafeGraph Data Purchase Dec-16-2021/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-PATTERNS-2021_",
i,
"-2021-12-17/normalization_stats.csv",sep = ""))%>%
filter(region=="pa")
nsAllMonth = rbind(nsAllMonth,currentMonth)
#print(paste("Current input normalization_stats dataframe is in ",i," month",sep = ""))
}
kable(head(nsAllMonth,3),align = 'c',caption = '<center>Table 4. normalization stats of 2021 whole year in SafeGraph data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
# visit_panel_summary
vpsAllMonth = data.frame()
for (i in monthList){
currentMonth = vroom(paste("data/safegraph/SafeGraph Data Purchase Dec-16-2021/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-PATTERNS-2021_",
i,
"-2021-12-17/visit_panel_summary.csv",sep = ""))%>%
filter(region=="pa")
vpsAllMonth = rbind(vpsAllMonth,currentMonth)
#print(paste("Current input visit_panel_summary dataframe is in ",i," month",sep = ""))
}
kable(head(vpsAllMonth,3),align = 'c',caption = '<center>Table 5. visit panel summary of 2021 whole year in SafeGraph data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
# Pattern
patternAllMonth = data.frame()
for (i in monthList){
currentMonth = vroom(paste("data/safegraph/SafeGraph Data Purchase Dec-16-2021/Philadelphia-Camden-WilmingtonPA-NJ-DE-MDMSA-PATTERNS-2021_",
i,
"-2021-12-17/patterns.csv.gz",sep = ""))%>%
filter(region=="PA")%>%
mutate(month=paste(i,sep = ""))
patternAllMonth = rbind(patternAllMonth,currentMonth)
#print(paste("Current input patterns dataframe is in ",i," month",sep = ""))
}
kable(head(patternAllMonth,3),align = 'c',caption = '<center>Table 6. patterns of 2021 whole year in SafeGraph data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
philly <- st_read("https://opendata.arcgis.com/datasets/405ec3da942d4e20869d4e1449a2be48_0.geojson")
pprDistrict <- st_read('https://opendata.arcgis.com/datasets/0cdc4a1e86c6463b9600f9d9fca39875_0.geojson') %>%
st_transform(crs)
base_map <- get_map(location = unname(st_bbox(ll(st_buffer(st_union(pprDistrict),11000)))),maptype = "terrian")
ggmap(base_map) +
geom_sf(data=ll(st_union(pprDistrict)),color="black",size=2,fill = "transparent",inherit.aes = FALSE)+
geom_sf(data=ll(pprDistrict),color=palette1_main,size=2,fill = "transparent",inherit.aes = FALSE)+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprProperties <- st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprProperties,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprTrails <- st_read('https://opendata.arcgis.com/datasets/48323d574068405bbf5336b9b5b29455_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprTrails,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprOutPrograms <- st_read('https://opendata.arcgis.com/datasets/1f5d8108e06d457783538d4b7808c246_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprOutPrograms,color=palette1_main,size=8,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprPicnicSites <- st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppr_picnic_sites&filename=ppr_picnic_sites&format=geojson&skipfields=cartodb_id')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprPicnicSites,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprAdExercise <- st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppr_adult_exercise_equipment&filename=ppr_adult_exercise_equipment&format=geojson&skipfields=cartodb_id')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprAdExercise,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprSwimmingPool <- st_read('https://opendata.arcgis.com/datasets/c6f6176968f04d3f88adbc4c362af55d_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprSwimmingPool,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprTennisCourt <- st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppr_tennis_courts&filename=ppr_tennis_courts&format=geojson&skipfields=cartodb_id')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprTennisCourt,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprSpraygrounds <- st_read('https://opendata.arcgis.com/datasets/a148cc904d374b22bd456e44a044d554_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprSpraygrounds,color=palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprHydrationStations <- st_read('https://opendata.arcgis.com/datasets/cc35dc98180249fb9a6f2f5f06657df1_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprHydrationStations,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprPlaygrounds <- st_read('https://opendata.arcgis.com/datasets/899c807e205244278b3f39421be8489c_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprPlaygrounds,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprBoatLaunches <- st_read('https://opendata.arcgis.com/api/v3/datasets/ba32e1ac9c5341e1916274c2df3fbe22_0/downloads/data?format=geojson&spatialRefId=4326')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprBoatLaunches,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprBuildingStructures <- st_read('https://opendata.arcgis.com/datasets/97e90a049a35453ba0c51f974b3c77b4_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprBuildingStructures,color=palette1_main,size=1,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
query <- paste("SELECT objectid, avg_height, shape_area",
"FROM ppr_tree_canopy_outlines_2015",
"ORDER BY objectid ASC")
pprTreeCanopyWithArea <- get_carto(query, format = "csv",
base_url = "https://phl.carto.com/api/v2/sql", stringsAsFactors = F)
pprTreeCanopy <- st_read('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppr_tree_canopy_points_2015&filename=ppr_tree_canopy_points_2015&format=geojson&skipfields=cartodb_id')%>%
st_transform(crs)%>%
left_join(pprTreeCanopyWithArea,by = "objectid")
ggplot() +
geom_sf(data=pprTreeCanopy,color=palette1_main,aes(size=shape_area),fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
pprPermittableSpace <- st_read('https://opendata.arcgis.com/datasets/811b67c999bd4e839abb68b16c16f623_0.geojson')%>%
st_transform(crs)
ggplot() +
geom_sf(data=pprPermittableSpace,color=palette1_main,fill = palette1_main)+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
geom_sf(data=pprDistrict,color="black",size=1,linetype ="dashed",fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
library(rgdal)
pprServiceArea <- read_sf(dsn="data/FromPPR/PPR_Service_Areas_2021/PPR_Service_Areas_2021.shp")%>%
st_transform(crs = crs)
ggplot() +
geom_sf(data=pprServiceArea,color=palette1_main,size=1,fill = "transparent")+
geom_sf(data=st_union(pprDistrict),color="black",size=2,fill = "transparent")+
labs(title = "",
subtitle = "",
x="",y="")+
mapTheme()
perimit2021 <- vroom("data/FromPPR/PPR-recreation-permits-2021.csv")
kable(head(perimit2021,3),align = 'c',caption = '<center>Table 7. Program information of PPR Recreation data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
program2021 <- vroom("data/FromPPR/PPR-programs-attended-2021-with-schedules.csv")
kable(head(program2021,3),align = 'c',caption = '<center>Table 8. Program information of PPR Programs data <center/>')%>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
propertyArea <- read.csv("data/FromPPR/Service_Area_Sites.csv")
facilityID <- read.csv("data/FromPPR/tblFacility_to_PPR_Properties.csv")
# define date
program2021.clean <- program2021 %>%
mutate(AttendanceWeekDate = mdy(AttendanceWeekDate),
DateFrom = mdy(DateFrom),
DateTo = mdy(DateTo))
# create a df only containing records without program scheduel info
program2021.NA <- program2021.clean[is.na(program2021.clean$ProgramScheduleID),]
# filter by attendance date
program2021.clean <- program2021.clean %>%
filter(AttendanceWeekDate > DateFrom & AttendanceWeekDate < DateTo)
# original data is recorded by week, here we change it into being recorded by occurence
program2021.clean <- separate(program2021.clean, Days,into= c("1","2","3","4","5","6","7"))
program2021.clean <- program2021.clean %>%
gather(colNames, weekday, 15:21) %>%
select(-colNames) %>%
na.omit(cols='weekday')
# create exact attendance date
program2021.clean <- program2021.clean %>%
mutate(AttendenceRealDate = case_when(
weekday == "Monday" ~ AttendanceWeekDate,
weekday == "Tuesday" ~ AttendanceWeekDate+1,
weekday == "Wednesday" ~ AttendanceWeekDate+2,
weekday == "Thursday" ~ AttendanceWeekDate+3,
weekday == "Friday" ~ AttendanceWeekDate+4,
weekday == "Saturday" ~ AttendanceWeekDate+5,
weekday == "Sunday" ~ AttendanceWeekDate+6,
))
propertyParent <- pprProperties %>%
filter(NESTED=="N")
propertyKid <- pprProperties %>%
filter(NESTED=="Y")
# program2021.clean <- program2021.clean %>%
#   mutate(facilityForJoin = gsub("&","and",Facility))
#
# keyProgram <- unique(program2021.clean$facilityForJoin)
# keyProperty <- unique(pprProperties$PUBLIC_NAME)
#
# for (i in c(1:3924)){
#   for (g in c(1:524)){
#     if (grepl(program2021.clean[i,19],keyProperty[g])){
#       program2021.clean[i,19] = keyProperty[g]
#     }
#   }
# }
#
# join <- left_join(program2021.clean, pprProperties, by = c("facilityForJoin"="PUBLIC_NAME"))
#
# join_false <- join %>%
#   filter(is.na(join$PARENT_NAME))
#
# keyLabel <- pprProperties %>%
#   dplyr::select(LABEL) %>%
#   st_drop_geometry() %>%
#   unique()%>%
#   mutate(nouse=1)
#
# """for (i in c(1:766)){
#   for (g in c(1:493)){
#     if (grepl(keyLabel[g,1],join_false[[i,2]])){
#       print("k")
#       #join_false[i,2] = keyLabel[g,1]
#     }
#   }
# }"""
# filter into philly
safeGraph <- patternAllMonth %>%
filter(city == "Philadelphia")
# join with POI and brand data
safeGraph <- safeGraph %>%
left_join(core_poi, by=c("placekey","parent_placekey","location_name","street_address","city","region","postal_code","safegraph_brand_ids","brands"),keep=FALSE) %>%
left_join(brand_info, by=c("safegraph_brand_ids"="safegraph_brand_id","brands"="brand_name","top_category","sub_category","naics_code"),keep=FALSE)
# create geometry from lat & lng
safeGraph.geo <-
safeGraph %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, agr = "constant", na.fail=FALSE)
View(safeGraph)
## Keep only parks
parks <- safeGraph %>%
filter( naics_code %in% c(712190, 713990))
View(parks)
PPRmoves <- safeGraph %>%
filter(placekey %in% as.list(parks$placekey))
View(PPRmoves)
## timeseries
timeseries <-
PPRmoves %>%
select(placekey, date_range_start, date_range_end, visits_by_day) %>%
mutate(date_range_start = as_date(date_range_start),
date_range_end = as_date(date_range_end)) %>%
mutate(visits_by_day = str_remove_all(visits_by_day, pattern = "[\\[\\]]")) %>%
mutate(visits_by_day = str_split(visits_by_day, pattern = ",")) %>%
mutate(visits_by_day = future_map(visits_by_day, function(x){
unlist(x) %>%
as_tibble() %>%
mutate(day = 1:n(),
visits = value)
})) %>%
unnest(cols = c(visits_by_day)) %>%
dplyr::select(-value)
View(timeseries)
knitr::opts_chunk$set(echo = TRUE)
ggplot()+
geom_point(data = parkmoves %>%
left_join(parks, by = c("safegraph_place_id")),
aes(y = latitude, x = longitude, color = raw_visitor_counts,
fill = raw_visitor_counts, size = raw_visitor_counts),
alpha = 0.5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(vroom)
library(sf)
library(kableExtra)
library(mapview)
moves <- vroom("../../data/OneDrive-2021-12-07/moves_monthly2020.csv")
phila <- read_sf("phila.geojson")
library(furrr)
numCores <- availableCores() - 1
plan(multiprocess, workers = numCores)
parks <- phila %>%
filter( naics_code %in% c(712190, 713990))
## Should we do further filtration?
parkmoves <- moves %>%
filter(safegraph_place_id %in% as.list(parks$safegraph_place_id))
#tictoc::tic()
timeseries <-
parkmoves %>%
select(safegraph_place_id, date_range_start, date_range_end, visits_by_day) %>%
mutate(date_range_start = as_date(date_range_start),
date_range_end = as_date(date_range_end)) %>%
mutate(visits_by_day = str_remove_all(visits_by_day, pattern = "[\\[\\]]")) %>%
mutate(visits_by_day = str_split(visits_by_day, pattern = ",")) %>%
mutate(visits_by_day = future_map(visits_by_day, function(x){
unlist(x) %>%
as_tibble() %>%
mutate(day = 1:n(),
visits = value)
})) %>%
unnest(cols = c(visits_by_day)) %>%
dplyr::select(-value)
#tictoc::toc()
#timeseries$visits_by_day[1]
#1:n() creates a range
# tic() and toc() are used to record the time
tictoc::tic()
odMatrix <-
parkmoves %>%
select(safegraph_place_id, visitor_home_cbgs) %>%
mutate(visitor_home_cbgs = future_map(visitor_home_cbgs, function(x){
jsonlite::fromJSON(x) %>%
as_tibble()
})) %>%
unnest(visitor_home_cbgs) %>%
pivot_longer(!safegraph_place_id, names_to = "cbg", values_to = "visits") %>%
drop_na(visits)
tictoc::tic()
## Here join command use wrong columns and the way to calculate the distance should be change.
test <- odMatrix %>%
mutate(row_number = row_number()) %>%
group_by(cbg) %>% summarize(fake_distance = mean(row_number)) %>%
ungroup() %>%
left_join(odMatrix, .) %>%
left_join(., parkmoves)
library(rgeos)
library(igraph)
library(fastshp)
#install.packages("fastshp",,"http://rforge.net/",type="source")
source("https://raw.githubusercontent.com/alexsingleton/Huff-Tools/master/huff-tools.r")
##The sources is the basic package for huff model
## The source is very important!!!
#!!if we tried to use temporal model, then the setting of the MODEL,PACKAGES should be changed
#!!if we tried to use multiple predictors instead of just number of visitors, then the package should be changed
huff_results <- huff_basic(test$location_name, test$raw_visit_counts, test$cbg, test$fake_distance)
View(huff_results)
ggplot()+
geom_point(data = parkmoves %>%
left_join(parks, by = c("safegraph_place_id")),
aes(y = latitude, x = longitude, color = raw_visitor_counts,
fill = raw_visitor_counts, size = raw_visitor_counts),
alpha = 0.5)
View(safeGraph)
View(patternAllMonth)
View(core_poi)
View(brand_info)
## Keep only parks
parks <- safeGraph %>%
filter( naics_code %in% c(712190, 713990))
ggplot()+
geom_point(data = PPRmoves %>%
left_join(parks, by = c("placekey")),
aes(y = latitude, x = longitude, color = raw_visitor_counts,
fill = raw_visitor_counts, size = raw_visitor_counts),
alpha = 0.5)
ggplot()+
geom_point(data = PPRmoves,
aes(y = latitude, x = longitude, color = raw_visitor_counts,
fill = raw_visitor_counts, size = raw_visitor_counts),
alpha = 0.5)
ggplot(PPRmoves)+
geom_line(aes(x = date_range_start, y = raw_visit_counts))+
facet_wrap(~location_name, scales = "free")
ggplot(PPRmoves)+
geom_line(aes(x = date_range_start, y = raw_visit_counts))
hist(PPRmoves$date_range_start,PPRmoves$raw_visit_counts)
hist(PPRmoves$date_range_start,PPRmoves$raw_visit_counts, breaks = 12)
hist(PPRmoves$date_range_start,PPRmoves$raw_visit_counts, breaks = 11)
hist(PPRmoves$date_range_start,PPRmoves$raw_visit_counts, breaks = 9)
hist(PPRmoves$date_range_start,PPRmoves$raw_visit_counts, breaks = 10)
ggplot()+
geom_point(data = PPRmoves,
aes(y = latitude, x = longitude, color = raw_visitor_counts,
fill = raw_visitor_counts, size = raw_visitor_counts),
alpha = 0.5)
availableCores()
library(paralle)
knitr::opts_chunk$set(echo = TRUE)
library(vroom)
library(sf)
library(ggplot2)
library(ggmap)
library(kableExtra)
library(tidyverse)
library(data.table)
#remotes::install_github("CityOfPhiladelphia/rphl")
library(rphl)
library(lubridate)
library(furrr)
ll <- function(dat, proj4 = 4326){st_transform(dat, proj4)}
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
#windowsFonts(font = windowsFont('Helvetica'))
crs = 'EPSG:2272'
plotTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.01),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.5),
strip.background = element_blank(),
strip.text = element_text( size=9),
axis.title = element_text( size=9),
axis.text = element_text( size=7),
axis.text.y = element_text( size=7),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text( size = 9),
legend.key.size = unit(.5, 'line')
)
}
mapTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=base_size),
axis.title = element_text( size=9),
axis.text = element_blank(),
axis.text.y = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text(size=base_size),
legend.key.size = unit(.5, 'line')
)
}
palette5 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e","#315d7f")
palette4 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e")
palette2 <- c("#f9b294","#f2727f")
palette1_main <- "#F2727F"
palette1_assist <- '#F9B294'
availableCores()
