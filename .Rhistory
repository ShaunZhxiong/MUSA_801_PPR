propertyWithPlaceKey <- st_join(property %>% st_transform(crs=32118),
st_buffer(parks %>% dplyr::select(placekey, geometry) %>% st_transform(crs=32118),10),left=FALSE) %>%
st_drop_geometry() %>%
left_join(property %>% dplyr::select(OBJECTID),by=('OBJECTID'='OBJECTID')) %>%
st_sf() %>%
st_transform(crs=crs) %>%
drop_na(placekey)
# join filtered safeGraph place with ppr programs
program2021.joinWithPlaceKey <-
st_join(program2021.join %>%
st_sf() %>%
st_transform(crs=32118) %>%
st_buffer(10),
parks %>% st_transform(crs=32118) %>% dplyr::select(placekey, geometry),left=FALSE) %>%
st_drop_geometry() %>%
merge.data.frame(program2021.join %>%
dplyr::select(geometry),
by='row.names')%>%
dplyr::select(-Row.names) %>%
st_sf() %>%
st_transform(crs=crs)
permit2021.joinWithPlaceKey <-
st_join(permit2021.join %>%
st_sf() %>%
st_transform(crs=32118) %>%
st_buffer(10),
parks %>% st_transform(crs=32118) %>% dplyr::select(placekey, geometry),left=FALSE) %>%
st_drop_geometry() %>%
merge.data.frame(permit2021.join %>%
dplyr::select(geometry),
by='row.names')%>%
dplyr::select(-Row.names) %>%
st_sf() %>%
st_transform(crs=crs)
propertyWithPlaceKeyJustToPlot = propertyWithPlaceKey %>% distinct(OBJECTID,.keep_all = TRUE)
mapview(property,layer.name = c("All PPR Facilities"))+mapview(propertyWithPlaceKeyJustToPlot,col.regions = "green",layer.name = c("Sucessfully Joined Facilities"))+mapview(st_centroid(parks),col.regions = "red",layer.name = c("Safegraph Points"))
placeKeyNeeded = unique(propertyWithPlaceKey$placekey)
PPRmoves <- PPRmoves %>% filter(placekey %in% placeKeyNeeded)
# unnest visit Count data
# visitCount <-
#   PPRmoves %>%
#   select(placekey, date_range_start, date_range_end, visits_by_day) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          date_range_end = as_date(date_range_end)) %>%
#   dplyr::select(-date_range_end) %>%
#   mutate(visits_by_day = future_map(visits_by_day, function(x){
#     unlist(x) %>%
#       as_tibble() %>%
#       rowid_to_column(var = "day") %>%
#       mutate(visits = value) %>%
#       dplyr::select(-value)
#   })) %>%
#   unnest(cols = c("visits_by_day"))
# visitCount <- visitCount %>%
#     rename(visitDay = date_range_start) %>%
#     mutate(visitDay = day+visitDay-1) %>%
#     mutate(month = month(visitDay))
# st_write(visitCount,"data/output/visitCount.GeoJSON")
visitCount <- st_read("data/output/visitCount.GeoJSON",crs=crs)
# unnest popularity_by_hour data
# visitHour <-
#   PPRmoves %>%
#   select(placekey, popularity_by_hour, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(popularity_by_hour = future_map(popularity_by_hour, function(x){
#     unlist(x) %>%
#       as_tibble() %>%
#       rowid_to_column(var = "hour") %>%
#       rename(visit = value)
#   }))%>%
#   unnest(popularity_by_hour)
#
# st_write(visitHour,"data/output/visitHour.GeoJSON")
visitHour <- st_read("data/output/visitHour.GeoJSON",crs=crs)
# unnest the origin-destination data
# originCount <-
#   PPRmoves %>%
#   select(placekey, visitor_home_cbgs, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(visitor_home_cbgs = future_map(visitor_home_cbgs, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble() %>%
#       dplyr::select(starts_with("4")) %>%
#       gather()
#   })) %>%
#   unnest(visitor_home_cbgs) %>%
#   rename(origin =key ,visitors= value)
#
# st_write(originCount,"data/output/originCount.GeoJSON")
originCount <- st_read("data/output/originCount.GeoJSON",crs=crs)
#unnest the departure - destination data
# departCount <-
#   PPRmoves %>%
#   select(placekey, visitor_daytime_cbgs, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(visitor_daytime_cbgs = future_map(visitor_daytime_cbgs, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble() %>%
#       dplyr::select(starts_with("4")) %>%
#       gather()
#   }))%>%
#   unnest(visitor_daytime_cbgs) %>%
#   rename(departure =key ,visitors= value)
#
# st_write(departCount,"data/output/departCount.GeoJSON")
departCount <- st_read("data/output/departCount.GeoJSON",crs=crs)
# unnest the bucketed_dwell_times data
# dwellTime <-
#   PPRmoves %>%
#   select(placekey, bucketed_dwell_times, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(bucketed_dwell_times = future_map(bucketed_dwell_times, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble() %>%
#       gather()
#   }))%>%
#   unnest(bucketed_dwell_times) %>%
#   rename(dwellTimes =key ,visitors= value)
#
# st_write(dwellTime,"data/output/dwellTime.GeoJSON")
dwellTime <- st_read("data/output/dwellTime.GeoJSON",crs=crs)
# unnest the related_same_day_brand
# relatedBrand <-
#   PPRmoves %>%
#   select(placekey, related_same_day_brand, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(related_same_day_brand = future_map(related_same_day_brand, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble() %>%
#       gather()
#   }))
#
# relatedBrand <- relatedBrand %>%
#   unnest(related_same_day_brand) %>%
#   rename(relatedBrand =key ,visitors= value)
#
# st_write(relatedBrand,"data/output/relatedBrand.GeoJSON")
relatedBrand <- st_read("data/output/relatedBrand.GeoJSON",crs=crs)
# unnest the popularity_by_day data
# visitWeekday <-
#   PPRmoves %>%
#   select(placekey, popularity_by_day, date_range_start) %>%
#   mutate(date_range_start = as_date(date_range_start),
#          month =  month(date_range_start)) %>%
#   dplyr::select(-date_range_start) %>%
#   mutate(popularity_by_day = future_map(popularity_by_day, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble() %>%
#       gather()
#   }))%>%
#   unnest(popularity_by_day) %>%
#   rename(visitWeekday =key ,visits= value)
#
# st_write(visitWeekday,"data/output/visitWeekday.GeoJSON")
visitWeekday <- st_read("data/output/visitWeekday.GeoJSON",crs=crs)
# import
visitIntegrated <- st_read("data/output/visitIntegrated.GeoJSON") %>%
rename(c("Dwell<5"="X.5","Dwell>240"="X.240","Dwell11-20"="X11.20","Dwell121-240"="X121.240","Dwell21-60"="X21.60","Dwell5-10"="X5.10","Dwell61-120"="X61.120" ))
visitIntegrated <- visitIntegrated[,c(1,2,3,8,5,7,9,6,4)]
# normalize
visitIntegrated.scale <- scale(visitIntegrated %>%
dplyr::select(-placekey) %>%
st_drop_geometry())
set.seed(12)
# decide cluster number (only run once)
#nc <- NbClust(visitIntegrated.scale, min.nc=2, max.nc=15, method="kmeans", index="all")
#table(nc$Best.n[1,])
#
# barplot(table(nc$Best.n[1,]),
#         xlab="Numer of Clusters", ylab="Number of Criteria",
#         main="Number of Clusters Chosen by 26 Criteria")
# Run K-Means cluster
cluster1 <- kmeans(visitIntegrated.scale, 3)
#summary(cluster1)
# add cluster number back
visitIntegrated <- visitIntegrated %>%
mutate(cluster = cluster1$cluster)
# mean by cluster
cluster1_mean <- aggregate(visitIntegrated %>%
dplyr::select(-placekey, -cluster) %>%
st_drop_geometry(),
by=list(cluster=visitIntegrated$cluster),
FUN=mean) %>%
left_join(visitIntegrated %>%
st_drop_geometry() %>%
group_by(cluster) %>%
summarize(size = n()),
by="cluster")
kable(cluster1_mean,align = 'c',caption = '<center>Table 1. Mean values of clusters for SafeGraph data <center/>') %>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")%>%
scroll_box(width = "100%", height = "400px")
## put histograms on the diagonal
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, ...)
}
#Color points by groups
my_cols <- c(palette5[5],palette5[4],palette5[1])
pairs(visitIntegrated %>%
st_drop_geometry() %>%
mutate(`Dwel<10`=`Dwell<5`+`Dwell5-10`,
`Dwell11-120` = `Dwell11-20` + `Dwell21-60` + `Dwell61-120`,
`Dwell>120` =  `Dwell121-240` + `Dwell>240`) %>%
dplyr::select(nightVisit, `Dwel<10`, `Dwell11-120`, `Dwell>120`),
pch = 19,  cex = 0.5, cex.labels=1, diag.panel = panel.hist,
col = my_cols[visitIntegrated$cluster],
lower.panel=NULL, panel = panel.smooth)
# x <- clusplot(visitIntegrated.scale,
#          cluster1$cluster, color=TRUE, shade=TRUE, main = "",
#          labels=5, lines=0, stand=TRUE, col.txt=palette5[1:3], col.clus=palette5[1:3], col.p=palette5[5])
# decide component number - 2 (only run once)
# fa.parallel(as.data.frame(visitIntegrated.scale), fa = 'pc', n.iter = 100, show.legend = FALSE)
# principal component analysis
set.seed(1234)
cluster1_pca <- principal(visitIntegrated.scale, nfactors = 2, rotate = "none", scores = TRUE)
options(digits = 2)
kable(t(cluster1_pca$Structure[1:8,1:2]),align = 'c',caption = '<center>Table 3.1.1 Correlations between variables and components <center/>') %>%
kable_classic(full_width = F)%>%
kable_styling(position = "center")
# cluster info
cluster <- visitIntegrated %>%
st_drop_geometry() %>%
dplyr::select(placekey, cluster)
# caculate the ratio to trim "Dwell5-10" for cluster 1
Sum <- visitIntegrated %>%
st_drop_geometry() %>%
mutate(Total = `Dwell<5`+`Dwell5-10`+`Dwell11-20`+`Dwell21-60`+`Dwell61-120`+`Dwell121-240`+`Dwell>240`) %>%
group_by(cluster) %>%
summarize(`Dwell5-10` = sum(`Dwell5-10`),
`Dwell<5` = sum(`Dwell<5`),
Total = sum(Total))
ratio5To10 <- Sum[3,]$`Dwell5-10`/Sum[3,]$Total
group1.dwell <- dwellTime %>%
st_drop_geometry() %>%
spread(key=dwellTimes, value = visitors) %>%
left_join(visitIntegrated %>% dplyr::select(placekey, cluster) %>% st_drop_geometry(), by="placekey") %>%
filter(cluster==1) %>%
mutate(Total = `<5`+`5-10`+`11-20`+`21-60`+`61-120`+`121-240`+`>240`,
`rectified5-10`=ifelse((`5-10`-ratio5To10*Total/(ratio5To10-1)/`5-10`)<=`5-10`,
`5-10`-ratio5To10*Total/(ratio5To10-1)/`5-10`,
`5-10`),
`rectified5-10rate`=`rectified5-10`/Total,
`<5rate`=`<5`/Total)
group23.dwell <- dwellTime %>%
st_drop_geometry() %>%
spread(key=dwellTimes, value = visitors) %>%
mutate(Total = `<5`+`5-10`+`11-20`+`21-60`+`61-120`+`121-240`+`>240`,
`<5rate`=`<5`/Total)
# caculate the ratio to trim "Dwell121-240" and "Dwell>240" for cluster 2
ratio2h <- visitHour %>%
st_drop_geometry() %>%
spread(key = hour, value = visit) %>%
left_join(visitIntegrated %>%
st_drop_geometry() %>%
dplyr::select(placekey, cluster)) %>%
mutate(residents = (`1`+`2`+`3`+`4`+`5`)/5,
hourlySum = (`1`+`2`+`3`+`4`+`5`+`6`+`7`+`8`+`9`+`10`+`11`+`12`+`13`+`14`+`15`+`16`+`17`+`18`+`19`+`20`+`21`+`22`+`23`+`24`),
`ratio>2h` = 16.25*residents/hourlySum) %>%
dplyr::select(placekey, month, `ratio>2h`, cluster, residents)
# rectify 'visitHour'
visitHour <- visitHour %>%
left_join(ratio2h, by=c("placekey","month"))
visitHour <- visitHour %>%
filter(cluster==2) %>%
filter(hour<=5) %>%
mutate(visit = ifelse(visit-residents*0.9<0,
visit*0.05,
visit-residents*0.9)) %>%
rbind(
visitHour %>%
filter(cluster==2) %>%
filter(hour>=6 & hour<=10) %>%
mutate(visit=ifelse(visit-residents*(0.9-0.115*(hour-5))<0,
visit*0.05,
visit-residents*(0.9-0.115*(hour-5))))
) %>%
rbind(
visitHour %>%
filter(cluster==2) %>%
filter(hour>=11 & hour<=18) %>%
mutate(visit=ifelse(visit-residents*0.25*20/24<0,
visit*0.05,
visit-residents*0.25*20/24))
) %>%
rbind(
visitHour %>%
filter(cluster==2) %>%
filter(hour>=19) %>%
mutate(visit=ifelse(visit-residents*(0.25*20/24+0.115*(hour-18))<0,
visit*0.05,
visit-residents*(0.25*20/24+0.115*(hour-18))))
) %>%
rbind(
visitHour %>%
filter(cluster!=2)
) %>%
dplyr::select(-`ratio>2h`, -cluster,-residents)
# rectify 'dwellTime'
dwellTime <- dwellTime %>%
left_join(ratio2h, by=c("placekey","month"))
dwellTime <- dwellTime %>%
filter(cluster==2) %>%
filter(dwellTimes=="121-240" | dwellTimes==">240") %>%
mutate(visitors = visitors*(1-`ratio>2h`)) %>%
rbind(dwellTime %>%
filter(cluster==2) %>%
filter(dwellTimes!="121-240" & dwellTimes!=">240")) %>%
rbind(dwellTime %>%
filter(cluster==1) %>%
filter(dwellTimes=="5-10") %>%
left_join(group1.dwell %>% dplyr::select(placekey,month,`rectified5-10`),by=c("placekey","month")) %>%
mutate(visitors = `rectified5-10`) %>%
dplyr::select(-`rectified5-10`)) %>%
rbind(dwellTime %>%
filter(cluster==1) %>%
filter(dwellTimes!="5-10")) %>%
rbind(dwellTime %>%
filter(cluster==3)) %>%
dplyr::select(-`ratio>2h`, -cluster)
dwellTime <- dwellTime %>%
filter(dwellTimes!='<5')
# rectify 'visitCount'
visitCount <- visitCount %>%
left_join(ratio2h, by=c("placekey","month"))
visitCount <- visitCount %>%
filter(cluster==1) %>%
left_join(group1.dwell,by=c("placekey","month")) %>%
mutate(visits = visits*(1-`rectified5-10rate`-`<5rate`)) %>%
dplyr::select(placekey,visitDay,day,visits,month,geometry) %>%
rbind(visitCount %>%
filter(cluster==2)%>%
left_join(group23.dwell,by=c("placekey","month")) %>%
left_join(ratio2h, by=c("placekey","month")) %>%
mutate(visits = visits*(1-`<5rate`-`ratio>2h.y`)) %>%
dplyr::select(placekey,visitDay,day,visits,month,geometry)) %>%
rbind(visitCount %>%
filter(cluster==3) %>%
left_join(group23.dwell,by=c("placekey","month")) %>%
mutate(visits = visits*(1-`<5rate`)) %>%
dplyr::select(placekey,visitDay,day,visits,month,geometry)) %>%
mutate(visits = round(visits,0))
sumVisit <- visitCount %>%
dplyr::select(-visitDay,-day,-month) %>%
group_by(placekey) %>%
summarise(visits=sum(visits))
ggplot(sumVisit)+
geom_sf(data=pprServiceArea,color='black',size=0.35,fill= "transparent")+
geom_sf(data=pprServiceArea %>% filter(PPR_DIST %in% c(7,8,9)),color='black',size=0.5,fill= "transparent")+
geom_sf(aes(size = visits),color = palette1_main,fill = palette1_main,alpha = 0.3) +
scale_size_continuous(range = c(1, 3),name = "Visits")+
mapTheme()+
theme(legend.position = "bottom",
legend.key.width = unit(0.5, 'cm'),
legend.key.height  = unit(0.2, 'cm'))
View(sumVisit)
st_write(sumVisit,"data/output/sumVisit.GEOJSON")
# st_write(sumVisit,"data/output/sumVisit.GEOJSON")
sumVisit <- st_read("data/output/sumVisit.GEOJSON")
View(sumVisit)
attracGEO789VISIT <- st_read("data/output/sumVisit.GEOJSON") %>%
st_drop_geometry() %>%
inner_join(attracGEO789 %>% dplyr::select(placekey),by="placekey")
View(attracGEO789VISIT)
# st_write(sumVisit,"data/output/sumVisit.GEOJSON")
attracGEO789VISIT <- st_read("data/output/sumVisit.GEOJSON") %>%
st_drop_geometry() %>%
inner_join(attracGEO789 %>% dplyr::select(placekey) %>% st_drop_geometry(),by="placekey")
# st_write(sumVisit,"data/output/sumVisit.GEOJSON")
attracGEO789VISIT <- st_read("data/output/sumVisit.GEOJSON") %>%
st_drop_geometry() %>%
inner_join(attracGEO789 ,by="placekey")
pcr_model = pcr(visits ~ .,
data = attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID)%>% st_drop_geometry(),
scale = TRUE,
validation = "CV",
ncomp = ncol(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID)%>% st_drop_geometry()) - 1)
st_crs(attracGEO789VISIT)
ncomp = ncol(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID,-geometry) - 1)
pcr_model = pcr(visits ~ .,
data = attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID, -geometry),
scale = TRUE,
validation = "CV",
ncomp = ncol(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID,-geometry) - 1))
pcr_model = pcr(visits ~ .,
data = attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID, -geometry),
scale = TRUE,
validation = "CV",
ncomp = ncol(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID,-geometry))- 1)
View(pcr_model)
pcr_cv = RMSEP(pcr_model, estimate = "CV")
pcr_cv
View(pcr_cv)
?RMSEP
components = 0:( ncol(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID,-geometry))- 1 )
plot(pcr_cv$val[1,1,] ~ components, pch = 19, type = "b", ylab = "Test RMSE", xlab = "Number of Components")
best_comp = which.min(pcr_cv$val[1,1,]) - 1  # which.min(pcr_cv$val[1,1,]) will give an *index* between 1-101.
# I want an index between 0-100 (zero for intercept only) since
#  this is how the previous plot was created.
# So subtract 1 from which.min(pcr_cv$val[1,1,]).
best_comp
plot(pcr_cv$val[1,1,] ~ components, pch = 19, type = "b", ylab = "Test RMSE", xlab = "Number of Components")
best_comp = which.min(pcr_cv$val[1,1,]) - 1  # which.min(pcr_cv$val[1,1,]) will give an *index* between 1-101.
# I want an index between 0-100 (zero for intercept only) since
#  this is how the previous plot was created.
# So subtract 1 from which.min(pcr_cv$val[1,1,]).
best_comp
abline(v = best_comp, col = "red")
min(pcr_cv$val[1,1,])
corrplot(attracGEO789VISIT,method="number", tl.cex = 0.25, type = "upper")
corrplot(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID, -geometry),method="number", tl.cex = 0.25, type = "upper")
attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID, -geometry)
corrplot(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID, -geometry),method="number")
corrplot(attracGEO789VISIT %>% dplyr::select(-visits,-placekey,-location_name, -DISTRICTID, -geometry),method="number")
attracGEO789VISIT %>%
dplyr::select(-visits,-placekey,-location_name, -DISTRICTID, -geometry) %>%
corrplot(method="number")
attracGEO789VISIT %>%
dplyr::select(-visits,-placekey,-location_name, -DISTRICTID, -geometry) %>%
corrplot()
corrplot(attracGEO789.cor,method="number", tl.cex = 0.25, type = "upper")
library(corrplot)
corrplot(attracGEO789.cor,method="number", tl.cex = 0.25, type = "upper")
# correlation matric among predictors to see if some of them are highly correlated
attracGEO789.cor = cor(attracGEO789 %>% dplyr::select(-placekey,-location_name, -DISTRICTID) %>% st_drop_geometry())
library(corrplot)
corrplot(attracGEO789.cor,method="number", tl.cex = 0.25, type = "upper")
# filter to get district 7,8,9
attracGEO789 <-
st_join(attractivenssDataOutput,
pprDistrict %>% filter(DISTRICTID %in% c(7,8,9)) %>% dplyr::select(DISTRICTID),
left=TRUE) %>%
filter(!is.na(DISTRICTID))
# correlation matric among predictors to see if some of them are highly correlated
attracGEO789.cor = cor(attracGEO789 %>% dplyr::select(-placekey,-location_name, -DISTRICTID) %>% st_drop_geometry())
library(corrplot)
corrplot(attracGEO789.cor,method="number", tl.cex = 0.25, type = "upper")
detach("package:pls", unload = TRUE)
library(corrplot)
corrplot(attracGEO789.cor,method="number", tl.cex = 0.25, type = "upper")
attracGEO789VISIT %>%
dplyr::select(-visits,-placekey,-location_name, -DISTRICTID, -geometry) %>%
corrplot()
corrplot(attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID, -geometry),method="number")
attempt <- attracGEO789VISIT %>% dplyr::select(-placekey,-location_name, -DISTRICTID, -geometry)
View(attempt)
corrplot(attempt,method="number")
corrplot(cor(attempt),method="number")
pcr_model = pcr(visits ~ .,
data = attempt,
scale = TRUE,
validation = "CV",
ncomp = ncol(attempt)- 1)
# apply pca
library(pls)
pcr_model = pcr(visits ~ .,
data = attempt,
scale = TRUE,
validation = "CV",
ncomp = ncol(attempt)- 1)
pcr_cv = RMSEP(pcr_model, estimate = "CV")
pcr_cv
components = 0:( ncol(attempt)- 1 )
ncol(attempt)
0:( ncol(attempt)- 1 )
plot(pcr_cv$val[1,1,] ~ components, pch = 19, type = "b", ylab = "Test RMSE", xlab = "Number of Components")
best_comp = which.min(pcr_cv$val[1,1,]) - 1  # which.min(pcr_cv$val[1,1,]) will give an *index* between 1-101.
plot(pcr_cv$val[1,1,] ~ components, pch = 19, type = "b", ylab = "Test RMSE", xlab = "Number of Components")
best_comp = which.min(pcr_cv$val[1,1,]) - 1  # which.min(pcr_cv$val[1,1,]) will give an *index* between 1-101.
# I want an index between 0-100 (zero for intercept only) since
#  this is how the previous plot was created.
# So subtract 1 from which.min(pcr_cv$val[1,1,]).
best_comp
abline(v = best_comp, col = "red")
min(pcr_cv$val[1,1,])
attempt <- attracGEO789VISIT %>% dplyr::select(-visits,-placekey,-location_name, -DISTRICTID, -geometry)
?prcomp
pca = prcomp(attempt, center = TRUE, scale. = TRUE)
names(pca )
components = 1:ncol(attempt)
plot(pca$sdev ~ components, ylab = "PCA Standard Deviation", xlab = "Component", pch = 19, type = "b")
View(pca)
names(pca )
summarise(pca)
summary(pca)
pca$rotation <- -1*pca$rotation
#display principal components
pca$rotation
names(pca )
pca$x <- -1*pca$x
pca$x
returnValue <- pca$x
View(returnValue)
#display principal components
pca$rotation
plot(pca$sdev ~ components, ylab = "PCA Standard Deviation", xlab = "Component", pch = 19, type = "b")
abline(v = 5, col = "red")
