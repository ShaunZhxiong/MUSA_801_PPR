coord_equal()
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y, xend = origin.x, yend = origin.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc"))) +
coord_equal()
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y, xend = origin.x, yend = origin.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc"))) +
ggplot() +
geom_curve(data = OD, aes(x = longitude.x, y = latitude.x, xend = longitude.y, yend = latitude.y, color=freq),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc"))) +
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y, xend = origin.x, yend = origin.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y, xend = origin.x, yend = origin.y),
curvature = -0.2)
ggplot(attempt3) +
geom_curve(x = park.x, y = park.y, xend = origin.x, yend = origin.y)
ggplot(data=attempt3) +
geom_curve(x = park.x, y = park.y, xend = origin.x, yend = origin.y)
ggplot(data=attempt3) +
geom_curve(x = park.x, y = park.y)
ggplot(data=attempt3) +
geom_sf(x = park.x, y = park.y)
ggplot(data=attempt3) +
geom_curve(x = attempt3$park.x, y = attempt3$park.y)
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y, xend = origin.x, yend = origin.y))
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y))
ggplot() +
geom_sf(data = attempt3, aes(x = park.x, y = park.y))
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y))
, xend = origin.x, yend = origin.y
ggplot() +
geom_curve(data = attempt3, aes(x = park.x, y = park.y, xend = origin.x, yend = origin.y))
ggplot() +
geom_curve(data = attempt3, aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
attempt3 <- attempt3 %>% round(origin.x,6)
attempt3 <- attempt3 %>% round(attempt3$origin.x,6)
round(attempt3$origin.x,6)
attempt3 <- attempt2 %>% mutate(park.y=as.numeric(future_map(parkGeometry,function(x){return(x[2])})),
park.x=future_map(parkGeometry,function(x){return(x[1])}),
origin.y=future_map(originGeometry,function(x){return(x[2])}),
origin.x=future_map(originGeometry,function(x){return(x[1])}))
attempt3 <- attempt2 %>% mutate(park.y=as.numeric(future_map(parkGeometry,function(x){return(x[2])})),
park.x=as.numeric(future_map(parkGeometry,function(x){return(x[1])})),
origin.y=as.numeric(future_map(originGeometry,function(x){return(x[2])})),
origin.x=as.numeric(future_map(originGeometry,function(x){return(x[1])})))
ggplot() +
geom_curve(data = attempt3, aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
ggplot() +
geom_curve(data = sample(attempt3,size=10), aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
ggplot() +
geom_curve(data = sample(attempt3,size=10,replace = TRUE), aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
sample(attempt3,size=10,replace = TRUE)
ggplot() +
geom_curve(data = sample_n(attempt3,20), aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
ggplot() +
geom_curve(data = sample_n(attempt3,10), aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
sample_n(attempt3,10)
ggplot() +
geom_curve(data = dplyr::sample_n(attempt3,10), aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
dplyr::sample_n(attempt3,10),
ggplot(data = sample_n(attempt3, 10)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
attempt3[2]
attempt3[,2]
ggplot(data = head(attempt3)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y))
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))+
#scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x, y = origin.y, xend = park.x, yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01)))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2, arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()+mapTheme()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 1,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()+mapTheme()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 0.1,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()+mapTheme()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 0.1,
color = palette1_main,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()+mapTheme()
ggplot(data = head(attempt3,n=20)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 0.1,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()+mapTheme()
ggplot(data = head(attempt3,n=100)) +
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 0.1,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
coord_equal()+mapTheme()
ggplot(data = head(attempt3,n=100)) +
geom_sf(data = pprServiceArea)+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 0.1,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
pprServiceArea <- read_sf(dsn="data/FromPPR/PPR_Service_Areas_2021/PPR_Service_Areas_2021.shp")%>%
st_transform(crs = crs)
ggplot(data = head(attempt3,n=100)) +
geom_sf(data = pprServiceArea)+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 0.1,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
View(pprServiceArea)
ggplot(data = head(attempt3,n=100)) +
geom_sf(data = pprServiceArea %>% st_transform(crs=4326))+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = 0.1,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
ggplot(data = head(attempt3,n=100)) +
geom_sf(data = pprServiceArea %>% st_transform(crs=4326))+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y),
curvature = -0.2,
size = visitors,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
ggplot(data = head(attempt3,n=100)) +
geom_sf(data = pprServiceArea %>% st_transform(crs=4326))+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y,
size = visitors),
curvature = -0.2,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
ggplot(data = head(attempt3,n=100)) +
geom_sf(data = pprServiceArea %>% st_transform(crs=4326))+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y,
size = q5(visitors)),
curvature = -0.2,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
ggplot(data = head(attempt3,n=100)) +
geom_sf(data = pprServiceArea %>% st_transform(crs=4326))+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y,
size = visitors),
curvature = -0.2,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
ggplot(data = head(attempt3,n=300)) +
geom_sf(data = pprServiceArea %>% st_transform(crs=4326))+
geom_curve(aes(x = origin.x,
y = origin.y,
xend = park.x,
yend = park.y,
size = visitors),
curvature = -0.2,
color = palette1_main,
alpha = 0.5,
arrow = arrow(length = unit(0.01, "npc")))+
scale_colour_distiller(palette="Reds", name="Frequency", guide = "colorbar") +
mapTheme()
qBr(attempt3,visitors)
q5(attempt3$visitors)
qBr(attempt3,attempt3$visitors)
View(placekeyGeometry)
View(originCount)
knitr::opts_chunk$set(echo = TRUE)
library(vroom)
library(sf)
library(ggplot2)
library(ggmap)
library(kableExtra)
library(tidyverse)
library(data.table)
#remotes::install_github("CityOfPhiladelphia/rphl")
library(rphl)
library(lubridate)
library(furrr)
library(tidycensus)
library(rgdal)
library(furrr)
library(mapview)
ll <- function(dat, proj4 = 4326){st_transform(dat, proj4)}
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
#windowsFonts(font = windowsFont('Helvetica'))
crs = 'EPSG:2272'
plotTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.01),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.5),
strip.background = element_blank(),
strip.text = element_text( size=9),
axis.title = element_text( size=9),
axis.text = element_text( size=7),
axis.text.y = element_text( size=7),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text( size = 9),
legend.key.size = unit(.5, 'line')
)
}
mapTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=base_size),
axis.title = element_text( size=9),
axis.text = element_blank(),
axis.text.y = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text(size=base_size),
legend.key.size = unit(.5, 'line')
)
}
palette5 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e","#315d7f")
palette4 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e")
palette2 <- c("#f9b294","#f2727f")
palette1_main <- "#F2727F"
palette1_assist <- '#F9B294'
#st_write(PPRmoves,"data/output/PPRmoves.GeoJSON")
PPRmoves <- st_read("data/output/PPRmoves.GeoJSON",crs=4326)
census_api_key("b33ec1cb4da108659efd12b3c15412988646cbd8", overwrite = TRUE)
CensusData <-
get_acs(geography = "block group",
variables = c("B01003_001E"),
year=2019, state="PA", county="Philadelphia", geometry=T, output="wide") %>%
st_transform(crs=4326) %>%
dplyr::select(-NAME,-starts_with('B')) %>%
st_centroid() %>%
as.data.frame() %>%
rename("originGeometry" = "geometry")
attempt <- originCount %>%
st_drop_geometry() %>%
group_by(origin,placekey) %>%
summarise(visitors=sum(visitors))
#   mutate(visitor_home_cbgs = future_map(visitor_home_cbgs, function(x){
#     jsonlite::fromJSON(x) %>%
#       as_tibble() %>%
#       dplyr::select(starts_with("4")) %>%
#       gather()
#   })) %>%
#   unnest(visitor_home_cbgs) %>%
#   rename(origin =key ,visitors= value)
#
# st_write(originCount,"data/output/originCount.GeoJSON")
originCount <- st_read("data/output/originCount.GeoJSON",crs=4326)
attempt <- originCount %>%
st_drop_geometry() %>%
group_by(origin,placekey) %>%
summarise(visitors=sum(visitors))
placekeyGeometry <-
originCount %>%
dplyr::select(placekey) %>%
group_by(placekey) %>% summarise()
attempt2 <-
attempt %>%
left_join(placekeyGeometry,by=c("placekey" = "placekey")) %>%
rename("parkGeometry" = "geometry")
attempt2 <- attempt2 %>% filter(startsWith(origin,"42101"))%>%left_join(CensusData,by=c("origin" = "GEOID"))
attempt3 <- attempt2 %>% mutate(park.y=as.numeric(future_map(parkGeometry,function(x){return(x[2])})),
park.x=as.numeric(future_map(parkGeometry,function(x){return(x[1])})),
origin.y=as.numeric(future_map(originGeometry,function(x){return(x[2])})),
origin.x=as.numeric(future_map(originGeometry,function(x){return(x[1])})))
# change workers number by yourself
plan(multiprocess, workers = 10)
attempt3 <- attempt2 %>% mutate(park.y=as.numeric(future_map(parkGeometry,function(x){return(x[2])})),
park.x=as.numeric(future_map(parkGeometry,function(x){return(x[1])})),
origin.y=as.numeric(future_map(originGeometry,function(x){return(x[2])})),
origin.x=as.numeric(future_map(originGeometry,function(x){return(x[1])})))
View(attempt2)
# change workers number by yourself
plan(multiprocess, workers = 10)
?future_map
attempt3 <- attempt2 %>% filter(visitors>100)
attempt3 <- attempt2 %>% filter(visitors>50)
attempt3 <- attempt3 %>% mutate(park.y=as.numeric(future_map(parkGeometry,function(x){return(x[2])})),
park.x=as.numeric(future_map(parkGeometry,function(x){return(x[1])})),
origin.y=as.numeric(future_map(originGeometry,function(x){return(x[2])})),
origin.x=as.numeric(future_map(originGeometry,function(x){return(x[1])})))
library(vroom)
library(sf)
library(ggplot2)
library(ggmap)
library(kableExtra)
library(tidyverse)
library(data.table)
#remotes::install_github("CityOfPhiladelphia/rphl")
library(rphl)
library(lubridate)
library(furrr)
library(tidycensus)
library(rgdal)
library(furrr)
library(mapview)
ll <- function(dat, proj4 = 4326){st_transform(dat, proj4)}
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
#windowsFonts(font = windowsFont('Helvetica'))
crs = 'EPSG:2272'
plotTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.01),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.5),
strip.background = element_blank(),
strip.text = element_text( size=9),
axis.title = element_text( size=9),
axis.text = element_text( size=7),
axis.text.y = element_text( size=7),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text( size = 9),
legend.key.size = unit(.5, 'line')
)
}
mapTheme <- function(base_size = 9, title_size = 10){
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle = element_text( face = 'italic',
size = base_size, colour = "black", hjust = 0.5),
plot.caption = element_text( hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=base_size),
axis.title = element_text( size=9),
axis.text = element_blank(),
axis.text.y = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text( colour = "black", face = "italic", size = 9),
legend.text = element_text( colour = "black", face = "italic", size = 7),
strip.text.x = element_text(size=base_size),
legend.key.size = unit(.5, 'line')
)
}
palette5 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e","#315d7f")
palette4 <- c("#f9b294","#f2727f","#c06c86","#6d5c7e")
palette2 <- c("#f9b294","#f2727f")
palette1_main <- "#F2727F"
palette1_assist <- '#F9B294'
# change workers number by yourself
plan(multiprocess, workers = 10)
attempt2 <-
attempt %>%
left_join(placekeyGeometry,by=c("placekey" = "placekey")) %>%
rename("parkGeometry" = "geometry")
attempt2 <- attempt2 %>% filter(startsWith(origin,"42101"))%>%left_join(CensusData,by=c("origin" = "GEOID"))
attempt3 <- attempt2 %>% filter(visitors>50)
attempt3 <- attempt3 %>% mutate(park.y=as.numeric(future_map(parkGeometry,function(x){return(x[2])})),
park.x=as.numeric(future_map(parkGeometry,function(x){return(x[1])})),
origin.y=as.numeric(future_map(originGeometry,function(x){return(x[2])})),
origin.x=as.numeric(future_map(originGeometry,function(x){return(x[1])})))
gc()
